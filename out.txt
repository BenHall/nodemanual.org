[32mGENERATING DOCUMENTATION[39m
[31mWe're building the documentation for Node.js, but you didn't specify a version! You must either: 
 * Add a parameter that matches x.y.z, where x, y, and z are all numerals; for example, 0.6.3
 * Pass in the word 'latest' for the latest version; currently, this is 0.6.7
I'll just build the latest for now...[39m
Constructing /buffers
Constructing /cryptography
Constructing /globals-in-node-js
Constructing /how-to-access-module-package-info
Constructing /how-to-access-query-string-parameters
Constructing /how-to-create-a-custom-repl
Constructing /how-to-create-a-HTTP-request
Constructing /how-to-create-a-HTTP-server
Constructing /how-to-create-a-HTTPS-server
Constructing /how-to-create-default-parameters-for-functions
Constructing /how-to-debug-nodejs-applications
Constructing /how-to-get-colors-on-the-command-line
Constructing /how-to-handle-multipart-form-data
Constructing /how-to-log
Constructing /how-to-parse-command-line-arguments
Constructing /how-to-prompt-for-command-line-input
Constructing /how-to-read-files-in-nodejs
Constructing /how-to-read-POST-data
Constructing /how-to-search-files-and-directories-in-nodejs
Constructing /how-to-serve-static-files
Constructing /how-to-spawn-a-child-process
Constructing /how-to-store-local-config-data
Constructing /how-to-use-buffers
Constructing /how-to-use-crypto-module
Constructing /how-to-use-fs-create-read-stream
Constructing /how-to-use-fs-create-write-stream
Constructing /how-to-use-nodejs-repl
Constructing /how-to-use-stream-pipe
Constructing /how-to-use-the-path-module
Constructing /how-to-use-the-tls-module
Constructing /how-to-use-util-inspect
Constructing /how-to-write-asynchronous-code
Constructing /how-to-write-files-in-nodejs
Constructing /HTTP-servers
Constructing /index
Constructing /npm
Constructing /overview
Constructing /reference
Constructing /security
Constructing /streams
Constructing /the-console-module
Constructing /the-process-module
Constructing /tutorial
Constructing /using-ECMA5-in-nodejs
Constructing /what-are-callbacks
Constructing /what-are-event-emitters
Constructing /what-are-the-built-in-timer-functions
Constructing /what-are-the-error-conventions
Constructing /what-are-truthy-and-falsy-values
Constructing /what-is-json
Constructing /what-is-node-core-verus-userland
Constructing /what-is-require
Constructing /what-is-the-arguments-object
Constructing /what-is-the-error-object
Constructing /what-is-the-file-package-json
Constructing /what-is-try-catch
Compiling file src/nodejs_ref_guide/v0.6.8/Concepts/addons.js
Compiling file src/nodejs_ref_guide/v0.6.8/Concepts/debugger.js
Compiling file src/nodejs_ref_guide/v0.6.8/Concepts/globals.js
Compiling file src/nodejs_ref_guide/v0.6.8/Concepts/modules.js
Compiling file src/nodejs_ref_guide/v0.6.8/Concepts/repl.js
{"Addons":{"id":"Addons","type":"namespace","description":"Addons are dynamically linked shared objects. They can provide glue to C and C++ libraries. The API (at the moment) is rather complex, involving knowledge of several libraries:\n\n - V8 JavaScript, a C++ library. Used for interfacing with JavaScript: creating objects, calling functions, etc. These are documented mostly in the `v8.h` header file (`deps/v8/include/v8.h` in the Node.js source tree).\n\n - [libuv](https://github.com/joyent/libuv), a C event loop library. Anytime one needs to wait for a file descriptor to become readable, wait for a timer, or wait for a signal to received one needs to interface with libuv. That is, if you perform any I/O, libuv needs to be used.\n\n - Internal Node libraries. Most importantly is the `node::ObjectWrap` class which you will likely want to derive from.\n\n - Additional libraries, located the `deps/` folder.\n\nNode.js statically compiles all its dependencies into the executable. When compiling your module, you don't need to worry about linking to any of these libraries.\n\nTo get started, let's make a small addon which is the C++ equivalent of the following Javascript code:\n\n    exports.hello = function() { return 'world'; };\n\nFirst, we'll create a file called `hello.cc`:\n\n    #include <node.h>\n    #include <v8.h>\n\n    using namespace v8;\n\n    Handle<Value> Method(const Arguments& args) {\n      HandleScope scope;\n      return scope.Close(String::New(\"world\"));\n    }\n\n    void init(Handle<Object> target) {\n      NODE_SET_METHOD(target, \"hello\", Method);\n    }\n    NODE_MODULE(hello, init)\n\nNote that all Node.js addons must export an initialization function:\n\n    void Initialize (Handle<Object> target);\n    NODE_MODULE(module_name, Initialize)\n\nThere is no semi-colon after `NODE_MODULE`, as it's not a function (for more information, see `node.h`).\n\nThe `module_name` needs to match the filename of the final binary (minus the __.node__ suffix).\n\nThe source code needs to be built into `hello.node`, the binary addon. To do this we create a file called `wscript`, which is Python code and looks like this:\n\n    srcdir = '.'\n    blddir = 'build'\n    VERSION = '0.0.1'\n\n    def set_options(opt):\n      opt.tool_options('compiler_cxx')\n\n    def configure(conf):\n      conf.check_tool('compiler_cxx')\n      conf.check_tool('node_addon')\n\n    def build(bld):\n      obj = bld.new_task_gen('cxx', 'shlib', 'node_addon')\n      obj.target = 'hello'\n      obj.source = 'hello.cc'\n\nRunning `node-waf configure build` will create a file `build/default/hello.node` which is our addon.\n\n`node-waf` is just [WAF](http://code.google.com/p/waf), the Python-based build system. `node-waf` is provided for developers to easily access it.\n\nYou can now use the binary addon in a Node project `hello.js` by pointing `require` to the recently built module:\n\n    var addon = require('./build/Release/hello');\n\n    console.log(addon.hello()); // 'world'\n\nFor the moment, that is all the documentation on addons. Please see\n[https://github.com/pietern/hiredis-node\">https://github.com/pietern/hiredis-nod](https://github.com/pietern/hiredis-node\">https://github.com/pietern/hiredis-nod) for a real example.","short_description":"Addons are dynamically linked shared objects. They can provide glue to C and C++ libraries. The API (at the moment) is rather complex, involving knowledge of several libraries:\n","ellipsis_description":"Addons are dynamically linked shared objects. They can provide glue to C and C++ libraries. The API (at the moment) ...","line":78,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.8","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.8/Concepts/addons.js#L78","name":"Addons","path":"Addons"}}
{"Debugging_Node.js":{"id":"Debugging_Node.js","type":"namespace","description":"V8 comes with an extensive debugger which is accessible out-of-process via a simple [TCP protocol](http://code.google.com/p/v8/wiki/DebuggerProtocol).\n\nNode.js has a built-in client for this debugger. To use this, start Node.js with the `debug` argument; a prompt appears, ready to take your command:\n\n    % node debug myscript.js\n    < debugger listening on port 5858\n    connecting... ok\n    break in /home/indutny/Code/git/indutny/myscript.js:1\n      1 x = 5;\n      2 setTimeout(function () {\n      3   debugger;\n    debug>\n\nNode's debugger client doesn't support the full range of commands, but simple step and inspection is possible. By putting the statement `debugger;` into the source code of your script, you will enable a breakpoint.\n\nFor example, suppose `myscript.js` looked like this:\n\n    // myscript.js\n    x = 5;\n    setTimeout(function () {\n      debugger;\n      console.log(\"world\");\n    }, 1000);\n    console.log(\"hello\");\n\nThen once the debugger is run, it will break on line 4.\n\n    % node debug myscript.js\n    < debugger listening on port 5858\n    connecting... ok\n    break in /home/indutny/Code/git/indutny/myscript.js:1\n      1 x = 5;\n      2 setTimeout(function () {\n      3   debugger;\n    debug> cont\n    < hello\n    break in /home/indutny/Code/git/indutny/myscript.js:3\n      1 x = 5;\n      2 setTimeout(function () {\n      3   debugger;\n      4   console.log(\"world\");\n      5 }, 1000);\n    debug> next\n    break in /home/indutny/Code/git/indutny/myscript.js:4\n      2 setTimeout(function () {\n      3   debugger;\n      4   console.log(\"world\");\n      5 }, 1000);\n      6 console.log(\"hello\");\n    debug> repl\n    Press Ctrl + C to leave debug repl\n    > x\n    5\n    > 2+2\n    4\n    debug> next\n    < world\n    break in /home/indutny/Code/git/indutny/myscript.js:5\n      3   debugger;\n      4   console.log(\"world\");\n      5 }, 1000);\n      6 console.log(\"hello\");\n      7\n    debug> quit\n    %\n\n\nThe `repl` command allows you to evaluate code remotely. The `next` command steps over to the next line. There are a few other commands available and more to come. Type `help` to see others.\n\n#### Watchers\n\nYou can watch expressions and variable values while debugging your code.\n\nOn every breakpoint each expression from the watchers list will be evaluated in the current context and displayed just before the breakpoint's source code listing.\n\nTo start watching an expression, type `watch(\"my_expression\")`. `watchers` prints the active watchers. To remove a watcher, type `unwatch(\"my_expression\")`.\n\n#### Commands Reference\n\n##### Stepping\n\n* `cont`, `c`: Continue\n* `next`, `n`: Step next\n* `step`, `s`: Step in\n* `out`, `o`: Step out\n\n##### Breakpoints\n\n* `setBreakpoint()`, `sb()`: Sets a breakpoint on the current line\n* `setBreakpoint('fn()')`, `sb(...)`: Sets a breakpoint on the first statement in the function's body\n* `setBreakpoint('script.js', 1)`, `sb(...)`: Sets a  breakpoint on the first line of `script.js`\n* `clearBreakpoint`, `cb(...)`: Clears a breakpoint\n\n##### Info\n\n* `backtrace`, `bt`: Prints a backtrace of the current execution frame\n* `list(c)`: Lists the script's source code with a five line context (five lines before and after)\n* `watch(expr)`: Adds an expression to the watch list\n* `unwatch(expr)`: Removes am expression from the watch list\n* `watchers`: Lists all the watchers and their values (automatically listed on each breakpoint)\n* `repl`: Open the debugger's REPL for evaluation in debugging a script's context\n\n##### Execution control\n\n* `run`: Run a script (automatically runs on debugger's start)\n* `restart`: Restart a script\n* `kill`: Kill a script\n\n##### Various\n\n* `scripts`: List all the loaded scripts\n* `version`: Display the V8 version\n\n#### Advanced Usage\n\nThe V8 debugger can be enabled and accessed either by starting Node.js with the `--debug` command-line flag or by signaling an existing Node.js process with `SIGUSR1`.","short_description":"V8 comes with an extensive debugger which is accessible out-of-process via a simple [TCP protocol](http://code.google.com/p/v8/wiki/DebuggerProtocol).\n","ellipsis_description":"V8 comes with an extensive debugger which is accessible out-of-process via a simple [TCP protocol](http://code.googl...","line":122,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.8","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.8/Concepts/debugger.js#L122","name":"js","path":"Debugging_Node.js"}}
{"Global_Objects":{"id":"Global_Objects","type":"namespace","description":"These objects are available to all modules. Some of these objects aren't actually in the global scope, but in the module scope; they'll be noted as such below.\n\n<dl>\n<dt>`__dirname`</dt>\n<dd>The name of the directory that the currently executing script resides in. `__dirname` isn't actually on the global scope, but is local to each module.</dd>\n<dd>For example, if you're running `node example.js` from `/Users/mjr`:\n\n<pre class=\"prettyprint\">\n    console.log(__dirname);\n    // prints /Users/mjr\n</pre>\n</dd>\n\n<dt>`__filename`</dt>\n<dd>The filename of the code being executed.  This is the resolved absolute path of this code file.  For a main program this is not necessarily the same filename used in the command line.  The value inside a module is the path to that module file.</dd>\n<dd>`__filename` isn't actually on the global scope, but is local to each module.</dd>\n<dd>For example, if you're running `node example.js` from `/Users/mjr`:\n\n<pre class=\"prettyprint\">\n    console.log(__filename);\n    // prints /Users/mjr/example.js\n</pre>\n</dd>\n\n<dt>Buffer</dt>\n<dd>Used to handle binary data. See the [buffers](buffer.html) section for more information.</dd>\n\n<dt>`console`</dt>\n<dd>Used to print to stdout and stderr. See the [stdio](console.html) section for more information.</dd>\n\n<dt>`exports`</dt>\n<dd>An object which is shared between all instances of the current module and made accessible through `require()`.</dd>\n<dd>`exports` is the same as the `module.exports` object. See `src/node.js` for more information.</dd>\n<dd>`exports` isn't actually on the global scope, but is local to each module.</dd>\n\n<dt>`global`</dt>\n<dd>The global namespace object.</dd>\n<dd>In browsers, the top-level scope is the global scope. That means that in browsers if you're in the global scope `var something` will define a global variable. In Node.js this is different. The top-level scope is not the global scope; `var something` inside a Node.js module is local only to that module.</dd>\n\n<dt>`module`</dt>\n<dd>A reference to the current module. In particular `module.exports` is the same as the `exports` object. See `src/node.js` for more information.</dd>\n<dd>`module` isn't actually on the global scope, but is local to each module.</dd>\n\n<dt>`process`</dt>\n<dd>The process object. See the [process object](process.html) section for more information.</dd>\n\n<dt>`require()`</dt>\n<dd>This is necessary to require modules. See the [Modules](modules.html) section for more information.</dd>\n<dd>`require` isn't actually on the global scope, but is local to each module.</dd>\n\n<dt>`require.cache`</dt>\n<dd>Modules are cached in this object when they are required. By deleting a key value from this object, the next `require` will reload the module.</dd>\n\n<dt>`require.resolve()`</dt>\n<dd>Use the internal `require()` machinery to look up the location of a module, but rather than loading the module, just return the resolved filename.</dd>\n\n<dt>`setTimeout(cb, ms)`<br/>\n`clearTimeout(t)`<br/>\n`setInterval(cb, ms)`<br/>\n`clearInterval(t)`</dt>\n<dd>These timer functions are all global variables. See the [timer](timer.html) section for more information.</dd>","short_description":"These objects are available to all modules. Some of these objects aren't actually in the global scope, but in the module scope; they'll be noted as such below.\n","ellipsis_description":"These objects are available to all modules. Some of these objects aren't actually in the global scope, but in the mo...","line":67,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.8","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.8/Concepts/globals.js#L67","name":"Global_Objects","path":"Global_Objects"}}
{"Modules":{"id":"Modules","type":"namespace","description":"Node.js has a simple module loading system. In Node.js, files and modules are in one-to-one correspondence.\n\nFor example, imagine a scenario where `foo.js` loads the module `circle.js` in the same directory.\n\nThe contents of `foo.js` are:\n\n    var circle = require('./circle.js');\n    console.log( 'The area of a circle of radius 4 is '\n               + circle.area(4));\n\nThe contents of `circle.js` are:\n\n    var PI = Math.PI;\n\n    exports.area = function (r) {\n      return PI * r * r;\n    };\n\n    exports.circumference = function (r) {\n      return 2 * PI * r;\n    };\n\nThe module `circle.js` has exported the functions `area()` and `circumference()`.  To export an object, add to the special [`exports`](#module.exports) object.\n\nVariables local to a module are private. In this example, the variable `PI` is private to `circle.js`.\n\n#### Cycles\n\nWhenever there are circular `require()` calls, a module might not be done being executed when it is returned.\n\nConsider this situation with the following files. In `a.js':\n\n    console.log('a starting');\n    exports.done = false;\n    var b = require('./b.js');\n    console.log('in a, b.done = %j', b.done);\n    exports.done = true;\n    console.log('a done');\n\nIn `b.js`:\n\n    console.log('b starting');\n    exports.done = false;\n    var a = require('./a.js');\n    console.log('in b, a.done = %j', a.done);\n    exports.done = true;\n    console.log('b done');\n\nAnd in `main.js`:\n\n    console.log('main starting');\n    var a = require('./a.js');\n    var b = require('./b.js');\n    console.log('in main, a.done=%j, b.done=%j', a.done, b.done);\n\nWhen `main.js` loads `a.js`, `a.js` loads `b.js`. At that point, `b.js` tries to load `a.js`.  In order to prevent an infinite loop an \"unfinished copy\" of the `a.js` exports object is returned to the `b.js` module.  `b.js` then finishes loading, and its exports object is provided to the `a.js` module.\n\nBy the time `main.js` finishes loading both modules, they've both finished executing. The output of this program would thus be:\n\n    $ node main.js\n    main starting\n    a starting\n    b starting\n    in b, a.done = false\n    b done\n    in a, b.done = true\n    a done\n    in main, a.done=true, b.done=true\n\nIf you have cyclic module dependencies in your program, make sure to plan accordingly.\n\n#### Core Modules\n\nNode.js has several modules compiled into the binary. These modules are described in greater detail elsewhere in this documentation.\n\nThe core modules are defined in Node's source in the `lib/` folder.\n\nCore modules are always preferentially loaded if their identifier is passed to `require()`.  For instance, `require('http')` always returns the built in HTTP module, even if there is a file by that name.\n\n#### File Modules\n\nIf the exact filename is not found, then Node.js attempts to load the required filename with the added extension of `.js`, `.json`, and then `.node`.\n\n`.js` files are interpreted as Javascript text files, and `.json` files are parsed as JSON text files. `.node` files are interpreted as compiled addon modules loaded with `dlopen`.\n\nA module prefixed with `'/'` is an absolute path to the file.  For example, `require('/home/marco/foo.js')` loads the file at `/home/marco/foo.js`.\n\nA module prefixed with `'./'` is relative to the file calling `require()`. That is, `circle.js` must be in the same directory as `foo.js` for `require('./circle')` to find it.\n\nWithout a leading `'/'` or `'./'` to indicate a file, the module is either a \"core module\" or is loaded from the `node_modules` folder.\n\nFor example, if the file at `'/home/ry/projects/foo.js'` is called by `require('bar.js')`, then Node.js looks for it in the following locations, in this order:\n\n* `/home/ry/projects/node_modules/bar.js`\n* `/home/ry/node_modules/bar.js`\n* `/home/node_modules/bar.js`\n* `/node_modules/bar.js`\n\nThis allows programs to localize their dependencies, so that they do not clash.\n\n#### Folders as Modules\n\nIt is convenient to organize programs and libraries into self-contained directories, and then provide a single entry point to that library.\n\nThere are three ways in which a folder may be passed to `require()` as an argument.\n\nThe first is to create a `package.json` file in the root of the folder, which specifies a `main` module.  An example `package.json` file might look like this:\n\n    { \"name\" : \"some-library\",\n      \"main\" : \"./lib/some-library.js\" }\n\nIf this was in a folder at `./some-library`, then `require('./some-library')` would attempt to load `./some-library/lib/some-library.js`.\n\nThis is the extent of Node's awareness of `package.json` files.\n\nIf there is no `package.json` file present in the directory, then Node.js attempts to load an `index.js` or `index.node` file out of that directory.  For example, if there was no `package.json` file in the above example, then `require('./some-library')` would attempt to load:\n\n* `./some-library/index.js`\n* `./some-library/index.node`\n\n#### Caching\n\nModules are cached after the first time they are loaded.  This means (among other things) that every call to `require('foo')` gets exactly the same object returned, if it would resolve to the same file.\n\nMultiple calls to `require('foo')` may not cause the module code to be executed multiple times.  This is an important feature.  With it, \"partially done\" objects can be returned, thus allowing transitive dependencies to be loaded even when they would cause cycles.\n\nIf you want to have a module execute code multiple times, then export a function, and call that function.\n\n#### Module Caching Caveats\n\nModules are cached based on their resolved filename.  Since modules may resolve to a different filename based on the location of the calling module (loading from `node_modules` folders), it is not a guarantee that `require('foo')` always returns the exact same object, if it would resolve to different files.\n\n<a id=\"module.exports\"></a>\n\nThe `exports` object is created by the Module system. Sometimes, this is not acceptable, as some developers want their module to be an instance of some class.\n\nTo do this assign the desired export object to `module.exports`. For example suppose we were making a module called `a.js`\n\n    var EventEmitter = require('events').EventEmitter;\n\n    module.exports = new EventEmitter();\n\n    // Do some work, and after some time emit\n    // the 'ready' event from the module itself.\n    setTimeout(function() {\n      module.exports.emit('ready');\n    }, 1000);\n\nThen, in another file we could do\n\n    var a = require('./a');\n    a.on('ready', function() {\n      console.log('module a is ready');\n    });\n\n\nNote that the assignment to `module.exports` must be done immediately. It cannot be done in any callbacks. For example, this does not work:\n\nIn a file called `x.js`:\n\n    setTimeout(function() {\n      module.exports = { a: \"hello\" };\n    }, 0);\n\nIn a file called `y.js`:\n\n    var x = require('./x');\n    console.log(x.a);\n\n\n#### `module.require`\n\nThe `module.require` method provides a way to load a module as if `require()` was called from the original module.\n\nNote that in order to do this, you must get a reference to the `module` object.  Since `require()` returns the `exports`, and the `module` is typically *only* available within a specific module's code, it must be explicitly exported in order to be used.\n\n\n#### All Together Now\n\nTo get the exact filename that will be loaded when `require()` is called, use the `require.resolve()` function.\n\nPutting together all of the above, here is the high-level algorithm (in pseudocode) of what `require.resolve()` does:\n\n<dl>\n<dt>To `require(X)` from module at path Y:</dt>\n<dd>\n    <pre>\n    1. If X is a core module,\n        a. return the core module\n        b. STOP\n    2. If X begins with './' or '/' or '../'\n        a. LOAD_AS_FILE(Y + X)\n        b. LOAD_AS_DIRECTORY(Y + X)\n    3. LOAD_NODE_MODULES(X, dirname(Y))\n    4. THROW \"not found\"\n    </pre>\n</dd>\n<dt>To `LOAD_AS_FILE(X)`:</dt>\n<dd>\n    <pre>\n    1. If X is a file, load X as JavaScript text.  STOP\n    2. If X.js is a file, load X.js as JavaScript text.  STOP\n    3. If X.node is a file, load X.node as binary addon.  STOP\n    </pre>\n<dd>\n<dt>To `LOAD_AS_DIRECTORY(X)`:</dt>\n<dd>\n    <pre>\n    1. If X/package.json is a file,\n       a. Parse X/package.json, and look for \"main\" field.\n       b. let M = X + (json main field)\n       c. LOAD_AS_FILE(M)\n    2. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\n    3. If X/index.node is a file, load X/index.node as binary addon.  STOP\n    </pre>\n</dd>\n<dt>To `LOAD_NODE_MODULES(X, START)`: </dt>\n<dd>\n    <pre>\n    1. let DIRS=NODE_MODULES_PATHS(START)\n    2. for each DIR in DIRS:\n       a. LOAD_AS_FILE(DIR/X)\n       b. LOAD_AS_DIRECTORY(DIR/X)\n    </pre>\n</dd>\n<dt>To `NODE_MODULES_PATHS(START)`: </dt>\n<dd>\n    <pre>\n    1. let PARTS = path split(START)\n    2. let ROOT = index of first instance of \"node_modules\" in PARTS, or 0\n    3. let I = count of PARTS - 1\n    4. let DIRS = []\n    5. while I > ROOT,\n       a. if PARTS[I] = \"node_modules\" CONTINUE\n       c. DIR = path join(PARTS[0 .. I] + \"node_modules\")\n       b. DIRS = DIRS + DIR\n       c. let I = I - 1\n    6. return DIRS\n    </pre>\n</dd>\n\n#### Loading from the global folders\n\nIf the `NODE_PATH` environment variable is set to a colon-delimited list of absolute paths, then Node.js searches those paths for modules if they are not found elsewhere. (Note: On Windows, `NODE_PATH` is delimited by semicolons instead of colons.)\n\nAdditionally, Node.js searches in the following locations:\n\n* 1: `$HOME/.node_modules`\n* 2: `$HOME/.node_libraries`\n* 3: `$PREFIX/lib/node`\n\nWhere `$HOME` is the user's home directory, and `$PREFIX` is Node's configured `installPrefix`.\n\nThese are mostly for historic reasons. You are highly encouraged to place your dependencies locally in `node_modules` folders.  They will be loaded faster, and more reliably.\n\n#### Accessing the `main` module\n\nWhen a file is run directly from Node.js, `require.main` is set to its `module`. That means that you can determine whether a file has been run directly by testing for the following:\n\n    require.main === module\n\nFor a file `foo.js`, this is `true` if run via `node foo.js`, but `false` if run by `require('./foo')`.\n\nBecause `module` provides a `filename` property (normally equivalent to `__filename`), the entry point of the current application can be obtained by checking `require.main.filename`.\n\n#### Package Manager Tips\n\nThe semantics of Node's `require()` function were designed to be general enough to support a number of sane directory structures. Package manager programs such as `dpkg`, `rpm`, and `npm` will hopefully find it possible to build native packages from Node modules without modification.\n\nBelow we give a suggested directory structure that could work:\n\nLet's say that we wanted to have the folder at `/usr/lib/node/<some-package>/<some-version>` hold the contents of a specific version of a package.\n\nPackages can depend on one another. In order to install package `foo`, you may have to install a specific version of package `bar`.  The `bar` package may itself have dependencies, and in some cases, these dependencies may even collide or form cycles.\n\nSince Node.js looks up the `realpath` of any modules it loads (that is, resolves symlinks), and then looks for their dependencies in the `node_modules` folders as described above, this situation is very simple to resolve with the following architecture:\n\n* `/usr/lib/node/foo/1.2.3/` - Contents of the `foo` package, version 1.2.3.\n* `/usr/lib/node/bar/4.3.2/` - Contents of the `bar` package that `foo` depends on.\n* `/usr/lib/node/foo/1.2.3/node_modules/bar` - Symbolic link to `/usr/lib/node/bar/4.3.2/`.\n* `/usr/lib/node/bar/4.3.2/node_modules/*` - Symbolic links to the packages that `bar` depends on.\n\nThus, even if a cycle is encountered, or if there are dependency conflicts, every module will be able to get a version of its dependency that it can use.\n\nWhen the code in the `foo` package does `require('bar')`, it gets the version that is symlinked into `/usr/lib/node/foo/1.2.3/node_modules/bar`. Then, when the code in the `bar` package calls `require('quux')`, it gets the version that is symlinked into `/usr/lib/node/bar/4.3.2/node_modules/quux`.\n\nFurthermore, to make the module lookup process even more optimal, rather than putting packages directly in `/usr/lib/node`, we could put them in `/usr/lib/node_modules/<name>/<version>`.  Then Node.js doesn't bother looking for missing dependencies in `/usr/node_modules` or `/node_modules`.\n\nIn order to make modules available to the Node.js REPL, it might be useful to also add the `/usr/lib/node_modules` folder to the `$NODE_PATH` environment variable.  Since the module lookups using `node_modules` folders are all relative, and based on the real path of the files making the calls to `require()`, the packages themselves can be anywhere.","short_description":"Node.js has a simple module loading system. In Node.js, files and modules are in one-to-one correspondence.\n","ellipsis_description":"Node.js has a simple module loading system. In Node.js, files and modules are in one-to-one correspondence.\n ...","line":295,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.8","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.8/Concepts/modules.js#L295","name":"Modules","path":"Modules"}}
{"repl":{"id":"repl","type":"class","description":"A Read-Eval-Print-Loop (REPL) is available both as a standalone program and easily includable in other programs.  REPL provides a way to interactively run Javascript and see the results.  It can be used for debugging, testing, or just trying things out.\n\nBy executing `node` without any arguments from the command line, you'll be dropped into the REPL. It has a simplistic emacs line-editing:\n\n    mjr:~$ node\n    Type '.help' for options.\n    > a = [ 1, 2, 3];\n    [ 1, 2, 3 ]\n    > a.forEach(function (v) {\n    ...   console.log(v);\n    ...   });\n    1\n    2\n    3\n\nFor advanced line-editors, start `node` with the environmental variable `NODE_NO_READLINE=1`. This starts the REPL in canonical terminal settings which allow you to use with `rlwrap`.\n\nFor a quicker configuration, you could add this to your `.bashrc` file:\n\n    alias node=\"env NODE_NO_READLINE=1 rlwrap node\"\n\n#### REPL Features\n\nInside the REPL, multi-line expressions can be input, and tab completion is supported for both global and local variables.\n\nThe special variable `_` contains the result of the last expression, like so:\n\n    > [ \"a\", \"b\", \"c\" ]\n    [ 'a', 'b', 'c' ]\n    > _.length\n    3\n    > _ += 1\n    4\n\nThe REPL provides access to any variables in the global scope. You can expose a variable to the REPL explicitly by assigning it to the `context` object associated with each `REPLServer`.  For example:\n\n    // repl_test.js\n    var repl = require(\"repl\"),\n        msg = \"message\";\n\n    repl.start().context.m = msg;\n\nThings in the `context` object appear as local within the REPL:\n\n    mjr:~$ node repl_test.js\n    > m\n    'message'\n\n#### Special Commands\n\nThere are a few special REPL commands:\n\n  - `.break`: while inputting a multi-line expression, sometimes you get lost or just don't care about completing it; this wipes it out so you can start over\n  - `.clear`: resets the `context` object to an empty object and clears any multi-line expression.\n  - `.exit`: closes the I/O stream, which causes the REPL to exit.\n  - `.help`: shows this list of special commands\n  - `.save`: save the current REPL session to a file, like so: `>.save ./file/to/save.js`\n  - `.load`: loads a file into the current REPL session, like so: `>.load ./file/to/load.js`\n\n#### Key Combinations\n\nThe following key combinations in the REPL have special effects:\n\n  - `<ctrl>C` - Similar to the `.break` keyword, this terminates the current command.  Press twice on a blank line to forcibly exit the REPL.\n  - `<ctrl>D` - Similar to the `.exit` keyword, it closes to stream and exits the REPL","short_description":"A Read-Eval-Print-Loop (REPL) is available both as a standalone program and easily includable in other programs.  REPL provides a way to interactively run Javascript and see the results.  It can be used for debugging, testing, or just trying things out.\n","ellipsis_description":"A Read-Eval-Print-Loop (REPL) is available both as a standalone program and easily includable in other programs.  RE...","line":72,"aliases":[],"children":[{"id":"repl.start","type":"class method","signatures":[{"args":[{"name":"prompt","default_value":"&gt; ","optional":true},{"name":"stream","default_value":"process.stdin","optional":true},{"name":"eval","default_value":"eval","optional":true},{"name":"useGlobal","default_value":false,"optional":true},{"name":"ignoreUndefined","default_value":false,"optional":true}]}],"arguments":[{"name":"prompt","types":["String"],"description":"The starting prompt"},{"name":"stream","types":["String"],"description":"The stream to read from"},{"name":"eval","types":["String"],"description":"An asynchronous wrapper function that executes after each line"},{"name":"useGlobal","types":["String"],"description":"If `true`, then the REPL uses the global objectm instead of scripts in a separate context"},{"name":"ignoreUndefined","types":["String"],"description":"If `true`, the REPL won't output return valyes of a command if it's `undefined`"}],"description":"Starts a REPL with `prompt` as the prompt and `stream` for all I/O.\n\nYou can use your own `eval` function if it has the following signature:\n\n    function eval(cmd, callback) {\n      callback(null, result);\n    }\n\nMultiple REPLs can be started against the same running instance of node.  Each share the same global object but will have unique I/O.\n\n#### Example\n\nHere's an example that starts a REPL on stdin, a Unix socket, and a TCP socket:\n\n    var net = require(\"net\"),\n        repl = require(\"repl\");\n\n    connections = 0;\n\n    repl.start(\"node via stdin> \");\n\n    net.createServer(function (socket) {\n      connections += 1;\n      repl.start(\"node via Unix socket> \", socket);\n    }).listen(\"/tmp/node-repl-sock\");\n\n   net.createServer(function (socket) {\n      connections += 1;\n      repl.start(\"node via TCP socket> \", socket);\n    }).listen(5001);","short_description":"Starts a REPL with `prompt` as the prompt and `stream` for all I/O.\n","ellipsis_description":"Starts a REPL with `prompt` as the prompt and `stream` for all I/O.\n ...","line":113,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.8","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.8/Concepts/repl.js#L113","name":"start","path":"repl.start"}],"parentDir":"nodejs_ref_guidev0.6.8","subclasses":[],"href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.8/Concepts/repl.js#L72","name":"repl","path":"repl"},"repl.start":{"id":"repl.start","type":"class method","signatures":[{"args":[{"name":"prompt","default_value":"&gt; ","optional":true},{"name":"stream","default_value":"process.stdin","optional":true},{"name":"eval","default_value":"eval","optional":true},{"name":"useGlobal","default_value":false,"optional":true},{"name":"ignoreUndefined","default_value":false,"optional":true}]}],"arguments":[{"name":"prompt","types":["String"],"description":"The starting prompt"},{"name":"stream","types":["String"],"description":"The stream to read from"},{"name":"eval","types":["String"],"description":"An asynchronous wrapper function that executes after each line"},{"name":"useGlobal","types":["String"],"description":"If `true`, then the REPL uses the global objectm instead of scripts in a separate context"},{"name":"ignoreUndefined","types":["String"],"description":"If `true`, the REPL won't output return valyes of a command if it's `undefined`"}],"description":"Starts a REPL with `prompt` as the prompt and `stream` for all I/O.\n\nYou can use your own `eval` function if it has the following signature:\n\n    function eval(cmd, callback) {\n      callback(null, result);\n    }\n\nMultiple REPLs can be started against the same running instance of node.  Each share the same global object but will have unique I/O.\n\n#### Example\n\nHere's an example that starts a REPL on stdin, a Unix socket, and a TCP socket:\n\n    var net = require(\"net\"),\n        repl = require(\"repl\");\n\n    connections = 0;\n\n    repl.start(\"node via stdin> \");\n\n    net.createServer(function (socket) {\n      connections += 1;\n      repl.start(\"node via Unix socket> \", socket);\n    }).listen(\"/tmp/node-repl-sock\");\n\n   net.createServer(function (socket) {\n      connections += 1;\n      repl.start(\"node via TCP socket> \", socket);\n    }).listen(5001);","short_description":"Starts a REPL with `prompt` as the prompt and `stream` for all I/O.\n","ellipsis_description":"Starts a REPL with `prompt` as the prompt and `stream` for all I/O.\n ...","line":113,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.8","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.8/Concepts/repl.js#L113","name":"start","path":"repl.start"}}

Compiling file src/nodejs_ref_guide/v0.6.7/index.js
Compiling file src/nodejs_ref_guide/v0.6.7/Concepts/addons.js
Compiling file src/nodejs_ref_guide/v0.6.7/Concepts/debugger.js
Compiling file src/nodejs_ref_guide/v0.6.7/Concepts/globals.js
Compiling file src/nodejs_ref_guide/v0.6.7/Concepts/modules.js
Compiling file src/nodejs_ref_guide/v0.6.7/Concepts/repl.js
Compiling file src/nodejs_ref_guide/v0.6.7/Globals/buffers.js
Compiling file src/nodejs_ref_guide/v0.6.7/Globals/process.js
Compiling file src/nodejs_ref_guide/v0.6.7/Globals/stdio.js
Compiling file src/nodejs_ref_guide/v0.6.7/Globals/timers.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/assert.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/child_processes.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/cluster.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/dgram.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/dns.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/events.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/os.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/path.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/querystring.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/readline.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/tty.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/url.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/util.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/vm.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/zlib.js
Compiling file src/nodejs_ref_guide/v0.6.7/Globals/Streams/ReadableStream.js
Compiling file src/nodejs_ref_guide/v0.6.7/Globals/Streams/streams.js
Compiling file src/nodejs_ref_guide/v0.6.7/Globals/Streams/WritableStream.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/crypto/cipher.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/crypto/crypto.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/crypto/decipher.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/crypto/diffieHellman.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/crypto/hash.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/crypto/hmac.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/crypto/signer.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/crypto/verifier.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/fs/fs.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/fs/readstream.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/fs/stats.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/fs/watcher.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/fs/writestream.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/http/agent.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/http/clientrequest.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/http/clientresponse.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/http/http.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/http/server.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/http/serverrequest.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/http/serverresponse.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/https/agent.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/https/https.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/https/server.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/net/net.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/net/server.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/net/socket.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/tls/cleartextstream.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/tls/server.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/tls/tls.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/vm/script.js
Compiling file src/nodejs_ref_guide/v0.6.7/Modules/vm/vm.js
{"Index":{"id":"Index","type":"namespace","description":"Node.js is a server-side Javascript environment. It's event-driven, asynchronous, and allows you to write a web server in a relatively quick amount of time.\n\nThis section is the Node.js Reference API in its entirity. The origin of this content was from the original Nodejs.org documentation, with some heavy edits and improvements.\n\nIn addition, most samples can be run live and online by importing them into your [Cloud 9 IDE](http://c9.io) account.","short_description":"Node.js is a server-side Javascript environment. It's event-driven, asynchronous, and allows you to write a web server in a relatively quick amount of time.\n","ellipsis_description":"Node.js is a server-side Javascript environment. It's event-driven, asynchronous, and allows you to write a web serv...","line":12,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/index.js#L12","name":"Index","path":"Index"}}
{"Addons":{"id":"Addons","type":"namespace","description":"Addons are dynamically linked shared objects. They can provide glue to C and C++ libraries. The API (at the moment) is rather complex, involving knowledge of several libraries:\n\n - V8 JavaScript, a C++ library. Used for interfacing with JavaScript: creating objects, calling functions, etc. These are documented mostly in the `v8.h` header file (`deps/v8/include/v8.h` in the Node.js source tree).\n\n - [libuv](https://github.com/joyent/libuv), a C event loop library. Anytime one needs to wait for a file descriptor to become readable, wait for a timer, or wait for a signal to received one needs to interface with libuv. That is, if you perform any I/O, libuv needs to be used.\n\n - Internal Node libraries. Most importantly is the `node::ObjectWrap` class which you will likely want to derive from.\n\n - Additional libraries, located the `deps/` folder.\n\nNode.js statically compiles all its dependencies into the executable. When compiling your module, you don't need to worry about linking to any of these libraries.\n\nTo get started, let's make a small addon which is the C++ equivalent of the following Javascript code:\n\n    exports.hello = function() { return 'world'; };\n\nFirst, we'll create a file called `hello.cc`:\n\n    #include <node.h>\n    #include <v8.h>\n\n    using namespace v8;\n\n    Handle<Value> Method(const Arguments& args) {\n      HandleScope scope;\n      return scope.Close(String::New(\"world\"));\n    }\n\n    void init(Handle<Object> target) {\n      NODE_SET_METHOD(target, \"hello\", Method);\n    }\n    NODE_MODULE(hello, init)\n\nNote that all Node.js addons must export an initialization function:\n\n    void Initialize (Handle<Object> target);\n    NODE_MODULE(module_name, Initialize)\n\nThere is no semi-colon after `NODE_MODULE`, as it's not a function (for more information, see `node.h`).\n\nThe `module_name` needs to match the filename of the final binary (minus the __.node__ suffix).\n\nThe source code needs to be built into `hello.node`, the binary addon. To do this we create a file called `wscript`, which is Python code and looks like this:\n\n    srcdir = '.'\n    blddir = 'build'\n    VERSION = '0.0.1'\n\n    def set_options(opt):\n      opt.tool_options('compiler_cxx')\n\n    def configure(conf):\n      conf.check_tool('compiler_cxx')\n      conf.check_tool('node_addon')\n\n    def build(bld):\n      obj = bld.new_task_gen('cxx', 'shlib', 'node_addon')\n      obj.target = 'hello'\n      obj.source = 'hello.cc'\n\nRunning `node-waf configure build` will create a file `build/default/hello.node` which is our addon.\n\n`node-waf` is just [WAF](http://code.google.com/p/waf), the Python-based build system. `node-waf` is provided for developers to easily access it.\n\nYou can now use the binary addon in a Node project `hello.js` by pointing `require` to the recently built module:\n\n    var addon = require('./build/Release/hello');\n\n    console.log(addon.hello()); // 'world'\n\nFor the moment, that is all the documentation on addons. Please see\n[https://github.com/pietern/hiredis-node\">https://github.com/pietern/hiredis-nod](https://github.com/pietern/hiredis-node\">https://github.com/pietern/hiredis-nod) for a real example.","short_description":"Addons are dynamically linked shared objects. They can provide glue to C and C++ libraries. The API (at the moment) is rather complex, involving knowledge of several libraries:\n","ellipsis_description":"Addons are dynamically linked shared objects. They can provide glue to C and C++ libraries. The API (at the moment) ...","line":78,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Concepts/addons.js#L78","name":"Addons","path":"Addons"}}
{"Debugging_Node.js":{"id":"Debugging_Node.js","type":"namespace","description":"V8 comes with an extensive debugger which is accessible out-of-process via a simple [TCP protocol](http://code.google.com/p/v8/wiki/DebuggerProtocol).\n\nNode.js has a built-in client for this debugger. To use this, start Node.js with the `debug` argument; a prompt appears, ready to take your command:\n\n    % node debug myscript.js\n    < debugger listening on port 5858\n    connecting... ok\n    break in /home/indutny/Code/git/indutny/myscript.js:1\n      1 x = 5;\n      2 setTimeout(function () {\n      3   debugger;\n    debug>\n\nNode's debugger client doesn't support the full range of commands, but simple step and inspection is possible. By putting the statement `debugger;` into the source code of your script, you will enable a breakpoint.\n\nFor example, suppose `myscript.js` looked like this:\n\n    // myscript.js\n    x = 5;\n    setTimeout(function () {\n      debugger;\n      console.log(\"world\");\n    }, 1000);\n    console.log(\"hello\");\n\nThen once the debugger is run, it will break on line 4.\n\n    % node debug myscript.js\n    < debugger listening on port 5858\n    connecting... ok\n    break in /home/indutny/Code/git/indutny/myscript.js:1\n      1 x = 5;\n      2 setTimeout(function () {\n      3   debugger;\n    debug> cont\n    < hello\n    break in /home/indutny/Code/git/indutny/myscript.js:3\n      1 x = 5;\n      2 setTimeout(function () {\n      3   debugger;\n      4   console.log(\"world\");\n      5 }, 1000);\n    debug> next\n    break in /home/indutny/Code/git/indutny/myscript.js:4\n      2 setTimeout(function () {\n      3   debugger;\n      4   console.log(\"world\");\n      5 }, 1000);\n      6 console.log(\"hello\");\n    debug> repl\n    Press Ctrl + C to leave debug repl\n    > x\n    5\n    > 2+2\n    4\n    debug> next\n    < world\n    break in /home/indutny/Code/git/indutny/myscript.js:5\n      3   debugger;\n      4   console.log(\"world\");\n      5 }, 1000);\n      6 console.log(\"hello\");\n      7\n    debug> quit\n    %\n\n\nThe `repl` command allows you to evaluate code remotely. The `next` command steps over to the next line. There are a few other commands available and more to come. Type `help` to see others.\n\n#### Watchers\n\nYou can watch expressions and variable values while debugging your code.\n\nOn every breakpoint each expression from the watchers list will be evaluated in the current context and displayed just before the breakpoint's source code listing.\n\nTo start watching an expression, type `watch(\"my_expression\")`. `watchers` prints the active watchers. To remove a watcher, type `unwatch(\"my_expression\")`.\n\n#### Commands Reference\n\n##### Stepping\n\n* `cont`, `c`: Continue\n* `next`, `n`: Step next\n* `step`, `s`: Step in\n* `out`, `o`: Step out\n\n##### Breakpoints\n\n* `setBreakpoint()`, `sb()`: Sets a breakpoint on the current line\n* `setBreakpoint('fn()')`, `sb(...)`: Sets a breakpoint on the first statement in the function's body\n* `setBreakpoint('script.js', 1)`, `sb(...)`: Sets a  breakpoint on the first line of `script.js`\n* `clearBreakpoint`, `cb(...)`: Clears a breakpoint\n\n##### Info\n\n* `backtrace`, `bt`: Prints a backtrace of the current execution frame\n* `list(c)`: Lists the script's source code with a five line context (five lines before and after)\n* `watch(expr)`: Adds an expression to the watch list\n* `unwatch(expr)`: Removes am expression from the watch list\n* `watchers`: Lists all the watchers and their values (automatically listed on each breakpoint)\n* `repl`: Open the debugger's REPL for evaluation in debugging a script's context\n\n##### Execution control\n\n* `run`: Run a script (automatically runs on debugger's start)\n* `restart`: Restart a script\n* `kill`: Kill a script\n\n##### Various\n\n* `scripts`: List all the loaded scripts\n* `version`: Display the V8 version\n\n#### Advanced Usage\n\nThe V8 debugger can be enabled and accessed either by starting Node.js with the `--debug` command-line flag or by signaling an existing Node.js process with `SIGUSR1`.","short_description":"V8 comes with an extensive debugger which is accessible out-of-process via a simple [TCP protocol](http://code.google.com/p/v8/wiki/DebuggerProtocol).\n","ellipsis_description":"V8 comes with an extensive debugger which is accessible out-of-process via a simple [TCP protocol](http://code.googl...","line":122,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Concepts/debugger.js#L122","name":"js","path":"Debugging_Node.js"}}
{"Global_Objects":{"id":"Global_Objects","type":"namespace","description":"These objects are available to all modules. Some of these objects aren't actually in the global scope, but in the module scope; they'll be noted as such below.\n\n<dl>\n<dt>`__dirname`</dt>\n<dd>The name of the directory that the currently executing script resides in. `__dirname` isn't actually on the global scope, but is local to each module.</dd>\n<dd>For example, if you're running `node example.js` from `/Users/mjr`:\n\n<pre class=\"prettyprint\">\n    console.log(__dirname);\n    // prints /Users/mjr\n</pre>\n</dd>\n\n<dt>`__filename`</dt>\n<dd>The filename of the code being executed.  This is the resolved absolute path of this code file.  For a main program this is not necessarily the same filename used in the command line.  The value inside a module is the path to that module file.</dd>\n<dd>`__filename` isn't actually on the global scope, but is local to each module.</dd>\n<dd>For example, if you're running `node example.js` from `/Users/mjr`:\n\n<pre class=\"prettyprint\">\n    console.log(__filename);\n    // prints /Users/mjr/example.js\n</pre>\n</dd>\n\n<dt>Buffer</dt>\n<dd>Used to handle binary data. See the [buffers](buffer.html) section for more information.</dd>\n\n<dt>`console`</dt>\n<dd>Used to print to stdout and stderr. See the [stdio](console.html) section for more information.</dd>\n\n<dt>`exports`</dt>\n<dd>An object which is shared between all instances of the current module and made accessible through `require()`.</dd>\n<dd>`exports` is the same as the `module.exports` object. See `src/node.js` for more information.</dd>\n<dd>`exports` isn't actually on the global scope, but is local to each module.</dd>\n\n<dt>`global`</dt>\n<dd>The global namespace object.</dd>\n<dd>In browsers, the top-level scope is the global scope. That means that in browsers if you're in the global scope `var something` will define a global variable. In Node.js this is different. The top-level scope is not the global scope; `var something` inside a Node.js module is local only to that module.</dd>\n\n<dt>`module`</dt>\n<dd>A reference to the current module. In particular `module.exports` is the same as the `exports` object. See `src/node.js` for more information.</dd>\n<dd>`module` isn't actually on the global scope, but is local to each module.</dd>\n\n<dt>`process`</dt>\n<dd>The process object. See the [process object](process.html) section for more information.</dd>\n\n<dt>`require()`</dt>\n<dd>This is necessary to require modules. See the [Modules](modules.html) section for more information.</dd>\n<dd>`require` isn't actually on the global scope, but is local to each module.</dd>\n\n<dt>`require.cache`</dt>\n<dd>Modules are cached in this object when they are required. By deleting a key value from this object, the next `require` will reload the module.</dd>\n\n<dt>`require.resolve()`</dt>\n<dd>Use the internal `require()` machinery to look up the location of a module, but rather than loading the module, just return the resolved filename.</dd>\n\n<dt>`setTimeout(cb, ms)`<br/>\n`clearTimeout(t)`<br/>\n`setInterval(cb, ms)`<br/>\n`clearInterval(t)`</dt>\n<dd>These timer functions are all global variables. See the [timer](timer.html) section for more information.</dd>","short_description":"These objects are available to all modules. Some of these objects aren't actually in the global scope, but in the module scope; they'll be noted as such below.\n","ellipsis_description":"These objects are available to all modules. Some of these objects aren't actually in the global scope, but in the mo...","line":67,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Concepts/globals.js#L67","name":"Global_Objects","path":"Global_Objects"}}
{"Modules":{"id":"Modules","type":"namespace","description":"Node.js has a simple module loading system. In Node.js, files and modules are in one-to-one correspondence.\n\nFor example, imagine a scenario where `foo.js` loads the module `circle.js` in the same directory.\n\nThe contents of `foo.js` are:\n\n    var circle = require('./circle.js');\n    console.log( 'The area of a circle of radius 4 is '\n               + circle.area(4));\n\nThe contents of `circle.js` are:\n\n    var PI = Math.PI;\n\n    exports.area = function (r) {\n      return PI * r * r;\n    };\n\n    exports.circumference = function (r) {\n      return 2 * PI * r;\n    };\n\nThe module `circle.js` has exported the functions `area()` and `circumference()`.  To export an object, add to the special [`exports`](#module.exports) object.\n\nVariables local to a module are private. In this example, the variable `PI` is private to `circle.js`.\n\n#### Cycles\n\nWhenever there are circular `require()` calls, a module might not be done being executed when it is returned.\n\nConsider this situation with the following files. In `a.js':\n\n    console.log('a starting');\n    exports.done = false;\n    var b = require('./b.js');\n    console.log('in a, b.done = %j', b.done);\n    exports.done = true;\n    console.log('a done');\n\nIn `b.js`:\n\n    console.log('b starting');\n    exports.done = false;\n    var a = require('./a.js');\n    console.log('in b, a.done = %j', a.done);\n    exports.done = true;\n    console.log('b done');\n\nAnd in `main.js`:\n\n    console.log('main starting');\n    var a = require('./a.js');\n    var b = require('./b.js');\n    console.log('in main, a.done=%j, b.done=%j', a.done, b.done);\n\nWhen `main.js` loads `a.js`, `a.js` loads `b.js`. At that point, `b.js` tries to load `a.js`.  In order to prevent an infinite loop an \"unfinished copy\" of the `a.js` exports object is returned to the `b.js` module.  `b.js` then finishes loading, and its exports object is provided to the `a.js` module.\n\nBy the time `main.js` finishes loading both modules, they've both finished executing. The output of this program would thus be:\n\n    $ node main.js\n    main starting\n    a starting\n    b starting\n    in b, a.done = false\n    b done\n    in a, b.done = true\n    a done\n    in main, a.done=true, b.done=true\n\nIf you have cyclic module dependencies in your program, make sure to plan accordingly.\n\n#### Core Modules\n\nNode.js has several modules compiled into the binary. These modules are described in greater detail elsewhere in this documentation.\n\nThe core modules are defined in Node's source in the `lib/` folder.\n\nCore modules are always preferentially loaded if their identifier is passed to `require()`.  For instance, `require('http')` always returns the built in HTTP module, even if there is a file by that name.\n\n#### File Modules\n\nIf the exact filename is not found, then Node.js attempts to load the required filename with the added extension of `.js`, `.json`, and then `.node`.\n\n`.js` files are interpreted as Javascript text files, and `.json` files are parsed as JSON text files. `.node` files are interpreted as compiled addon modules loaded with `dlopen`.\n\nA module prefixed with `'/'` is an absolute path to the file.  For example, `require('/home/marco/foo.js')` loads the file at `/home/marco/foo.js`.\n\nA module prefixed with `'./'` is relative to the file calling `require()`. That is, `circle.js` must be in the same directory as `foo.js` for `require('./circle')` to find it.\n\nWithout a leading `'/'` or `'./'` to indicate a file, the module is either a \"core module\" or is loaded from the `node_modules` folder.\n\nFor example, if the file at `'/home/ry/projects/foo.js'` is called by `require('bar.js')`, then Node.js looks for it in the following locations, in this order:\n\n* `/home/ry/projects/node_modules/bar.js`\n* `/home/ry/node_modules/bar.js`\n* `/home/node_modules/bar.js`\n* `/node_modules/bar.js`\n\nThis allows programs to localize their dependencies, so that they do not clash.\n\n#### Folders as Modules\n\nIt is convenient to organize programs and libraries into self-contained directories, and then provide a single entry point to that library.\n\nThere are three ways in which a folder may be passed to `require()` as an argument.\n\nThe first is to create a `package.json` file in the root of the folder, which specifies a `main` module.  An example `package.json` file might look like this:\n\n    { \"name\" : \"some-library\",\n      \"main\" : \"./lib/some-library.js\" }\n\nIf this was in a folder at `./some-library`, then `require('./some-library')` would attempt to load `./some-library/lib/some-library.js`.\n\nThis is the extent of Node's awareness of `package.json` files.\n\nIf there is no `package.json` file present in the directory, then Node.js attempts to load an `index.js` or `index.node` file out of that directory.  For example, if there was no `package.json` file in the above example, then `require('./some-library')` would attempt to load:\n\n* `./some-library/index.js`\n* `./some-library/index.node`\n\n#### Caching\n\nModules are cached after the first time they are loaded.  This means (among other things) that every call to `require('foo')` gets exactly the same object returned, if it would resolve to the same file.\n\nMultiple calls to `require('foo')` may not cause the module code to be executed multiple times.  This is an important feature.  With it, \"partially done\" objects can be returned, thus allowing transitive dependencies to be loaded even when they would cause cycles.\n\nIf you want to have a module execute code multiple times, then export a function, and call that function.\n\n#### Module Caching Caveats\n\nModules are cached based on their resolved filename.  Since modules may resolve to a different filename based on the location of the calling module (loading from `node_modules` folders), it is not a guarantee that `require('foo')` always returns the exact same object, if it would resolve to different files.\n\n<a id=\"module.exports\"></a>\n\nThe `exports` object is created by the Module system. Sometimes, this is not acceptable, as some developers want their module to be an instance of some class.\n\nTo do this assign the desired export object to `module.exports`. For example suppose we were making a module called `a.js`\n\n    var EventEmitter = require('events').EventEmitter;\n\n    module.exports = new EventEmitter();\n\n    // Do some work, and after some time emit\n    // the 'ready' event from the module itself.\n    setTimeout(function() {\n      module.exports.emit('ready');\n    }, 1000);\n\nThen, in another file we could do\n\n    var a = require('./a');\n    a.on('ready', function() {\n      console.log('module a is ready');\n    });\n\n\nNote that the assignment to `module.exports` must be done immediately. It cannot be done in any callbacks. For example, this does not work:\n\nIn a file called `x.js`:\n\n    setTimeout(function() {\n      module.exports = { a: \"hello\" };\n    }, 0);\n\nIn a file called `y.js`:\n\n    var x = require('./x');\n    console.log(x.a);\n\n\n#### `module.require`\n\nThe `module.require` method provides a way to load a module as if `require()` was called from the original module.\n\nNote that in order to do this, you must get a reference to the `module` object.  Since `require()` returns the `exports`, and the `module` is typically *only* available within a specific module's code, it must be explicitly exported in order to be used.\n\n\n#### All Together Now\n\nTo get the exact filename that will be loaded when `require()` is called, use the `require.resolve()` function.\n\nPutting together all of the above, here is the high-level algorithm (in pseudocode) of what `require.resolve()` does:\n\n<dl>\n<dt>To `require(X)` from module at path Y:</dt>\n<dd>\n    <pre>\n    1. If X is a core module,\n        a. return the core module\n        b. STOP\n    2. If X begins with './' or '/' or '../'\n        a. LOAD_AS_FILE(Y + X)\n        b. LOAD_AS_DIRECTORY(Y + X)\n    3. LOAD_NODE_MODULES(X, dirname(Y))\n    4. THROW \"not found\"\n    </pre>\n</dd>\n<dt>To `LOAD_AS_FILE(X)`:</dt>\n<dd>\n    <pre>\n    1. If X is a file, load X as JavaScript text.  STOP\n    2. If X.js is a file, load X.js as JavaScript text.  STOP\n    3. If X.node is a file, load X.node as binary addon.  STOP\n    </pre>\n<dd>\n<dt>To `LOAD_AS_DIRECTORY(X)`:</dt>\n<dd>\n    <pre>\n    1. If X/package.json is a file,\n       a. Parse X/package.json, and look for \"main\" field.\n       b. let M = X + (json main field)\n       c. LOAD_AS_FILE(M)\n    2. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\n    3. If X/index.node is a file, load X/index.node as binary addon.  STOP\n    </pre>\n</dd>\n<dt>To `LOAD_NODE_MODULES(X, START)`: </dt>\n<dd>\n    <pre>\n    1. let DIRS=NODE_MODULES_PATHS(START)\n    2. for each DIR in DIRS:\n       a. LOAD_AS_FILE(DIR/X)\n       b. LOAD_AS_DIRECTORY(DIR/X)\n    </pre>\n</dd>\n<dt>To `NODE_MODULES_PATHS(START)`: </dt>\n<dd>\n    <pre>\n    1. let PARTS = path split(START)\n    2. let ROOT = index of first instance of \"node_modules\" in PARTS, or 0\n    3. let I = count of PARTS - 1\n    4. let DIRS = []\n    5. while I > ROOT,\n       a. if PARTS[I] = \"node_modules\" CONTINUE\n       c. DIR = path join(PARTS[0 .. I] + \"node_modules\")\n       b. DIRS = DIRS + DIR\n       c. let I = I - 1\n    6. return DIRS\n    </pre>\n</dd>\n\n#### Loading from the global folders\n\nIf the `NODE_PATH` environment variable is set to a colon-delimited list of absolute paths, then Node.js searches those paths for modules if they are not found elsewhere. (Note: On Windows, `NODE_PATH` is delimited by semicolons instead of colons.)\n\nAdditionally, Node.js searches in the following locations:\n\n* 1: `$HOME/.node_modules`\n* 2: `$HOME/.node_libraries`\n* 3: `$PREFIX/lib/node`\n\nWhere `$HOME` is the user's home directory, and `$PREFIX` is Node's configured `installPrefix`.\n\nThese are mostly for historic reasons. You are highly encouraged to place your dependencies locally in `node_modules` folders.  They will be loaded faster, and more reliably.\n\n#### Accessing the `main` module\n\nWhen a file is run directly from Node.js, `require.main` is set to its `module`. That means that you can determine whether a file has been run directly by testing for the following:\n\n    require.main === module\n\nFor a file `foo.js`, this is `true` if run via `node foo.js`, but `false` if run by `require('./foo')`.\n\nBecause `module` provides a `filename` property (normally equivalent to `__filename`), the entry point of the current application can be obtained by checking `require.main.filename`.\n\n#### Package Manager Tips\n\nThe semantics of Node's `require()` function were designed to be general enough to support a number of sane directory structures. Package manager programs such as `dpkg`, `rpm`, and `npm` will hopefully find it possible to build native packages from Node modules without modification.\n\nBelow we give a suggested directory structure that could work:\n\nLet's say that we wanted to have the folder at `/usr/lib/node/<some-package>/<some-version>` hold the contents of a specific version of a package.\n\nPackages can depend on one another. In order to install package `foo`, you may have to install a specific version of package `bar`.  The `bar` package may itself have dependencies, and in some cases, these dependencies may even collide or form cycles.\n\nSince Node.js looks up the `realpath` of any modules it loads (that is, resolves symlinks), and then looks for their dependencies in the `node_modules` folders as described above, this situation is very simple to resolve with the following architecture:\n\n* `/usr/lib/node/foo/1.2.3/` - Contents of the `foo` package, version 1.2.3.\n* `/usr/lib/node/bar/4.3.2/` - Contents of the `bar` package that `foo` depends on.\n* `/usr/lib/node/foo/1.2.3/node_modules/bar` - Symbolic link to `/usr/lib/node/bar/4.3.2/`.\n* `/usr/lib/node/bar/4.3.2/node_modules/*` - Symbolic links to the packages that `bar` depends on.\n\nThus, even if a cycle is encountered, or if there are dependency conflicts, every module will be able to get a version of its dependency that it can use.\n\nWhen the code in the `foo` package does `require('bar')`, it gets the version that is symlinked into `/usr/lib/node/foo/1.2.3/node_modules/bar`. Then, when the code in the `bar` package calls `require('quux')`, it gets the version that is symlinked into `/usr/lib/node/bar/4.3.2/node_modules/quux`.\n\nFurthermore, to make the module lookup process even more optimal, rather than putting packages directly in `/usr/lib/node`, we could put them in `/usr/lib/node_modules/<name>/<version>`.  Then Node.js doesn't bother looking for missing dependencies in `/usr/node_modules` or `/node_modules`.\n\nIn order to make modules available to the Node.js REPL, it might be useful to also add the `/usr/lib/node_modules` folder to the `$NODE_PATH` environment variable.  Since the module lookups using `node_modules` folders are all relative, and based on the real path of the files making the calls to `require()`, the packages themselves can be anywhere.","short_description":"Node.js has a simple module loading system. In Node.js, files and modules are in one-to-one correspondence.\n","ellipsis_description":"Node.js has a simple module loading system. In Node.js, files and modules are in one-to-one correspondence.\n ...","line":295,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Concepts/modules.js#L295","name":"Modules","path":"Modules"}}
{"repl":{"id":"repl","type":"class","description":"A Read-Eval-Print-Loop (REPL) is available both as a standalone program and easily includable in other programs.  REPL provides a way to interactively run Javascript and see the results.  It can be used for debugging, testing, or just trying things out.\n\nBy executing `node` without any arguments from the command line, you'll be dropped into the REPL. It has a simplistic emacs line-editing:\n\n    mjr:~$ node\n    Type '.help' for options.\n    > a = [ 1, 2, 3];\n    [ 1, 2, 3 ]\n    > a.forEach(function (v) {\n    ...   console.log(v);\n    ...   });\n    1\n    2\n    3\n\nFor advanced line-editors, start `node` with the environmental variable `NODE_NO_READLINE=1`. This starts the REPL in canonical terminal settings which allow you to use with `rlwrap`.\n\nFor a quicker configuration, you could add this to your `.bashrc` file:\n\n    alias node=\"env NODE_NO_READLINE=1 rlwrap node\"\n\n#### REPL Features\n\nInside the REPL, multi-line expressions can be input, and tab completion is supported for both global and local variables.\n\nThe special variable `_` contains the result of the last expression, like so:\n\n    > [ \"a\", \"b\", \"c\" ]\n    [ 'a', 'b', 'c' ]\n    > _.length\n    3\n    > _ += 1\n    4\n\nThe REPL provides access to any variables in the global scope. You can expose a variable to the REPL explicitly by assigning it to the `context` object associated with each `REPLServer`.  For example:\n\n    // repl_test.js\n    var repl = require(\"repl\"),\n        msg = \"message\";\n\n    repl.start().context.m = msg;\n\nThings in the `context` object appear as local within the REPL:\n\n    mjr:~$ node repl_test.js\n    > m\n    'message'\n\n#### Special Commands\n\nThere are a few special REPL commands:\n\n  - `.break`: while inputting a multi-line expression, sometimes you get lost or just don't care about completing it; this wipes it out so you can start over\n  - `.clear`: resets the `context` object to an empty object and clears any multi-line expression.\n  - `.exit`: closes the I/O stream, which causes the REPL to exit.\n  - `.help`: shows this list of special commands\n  - `.save`: save the current REPL session to a file, like so: `>.save ./file/to/save.js`\n  - `.load`: loads a file into the current REPL session, like so: `>.load ./file/to/load.js`\n\n#### Key Combinations\n\nThe following key combinations in the REPL have special effects:\n\n  - `<ctrl>C` - Similar to the `.break` keyword, this terminates the current command.  Press twice on a blank line to forcibly exit the REPL.\n  - `<ctrl>D` - Similar to the `.exit` keyword, it closes to stream and exits the REPL","short_description":"A Read-Eval-Print-Loop (REPL) is available both as a standalone program and easily includable in other programs.  REPL provides a way to interactively run Javascript and see the results.  It can be used for debugging, testing, or just trying things out.\n","ellipsis_description":"A Read-Eval-Print-Loop (REPL) is available both as a standalone program and easily includable in other programs.  RE...","line":72,"aliases":[],"children":[{"id":"repl.start","type":"class method","signatures":[{"args":[{"name":"prompt","default_value":"&gt; ","optional":true},{"name":"stream","default_value":"process.stdin","optional":true},{"name":"eval","default_value":"eval","optional":true},{"name":"useGlobal","default_value":false,"optional":true},{"name":"ignoreUndefined","default_value":false,"optional":true}]}],"arguments":[{"name":"prompt","types":["String"],"description":"The starting prompt"},{"name":"stream","types":["String"],"description":"The stream to read from"},{"name":"eval","types":["String"],"description":"An asynchronous wrapper function that executes after each line"},{"name":"useGlobal","types":["String"],"description":"If `true`, then the REPL uses the global objectm instead of scripts in a separate context"},{"name":"ignoreUndefined","types":["String"],"description":"If `true`, the REPL won't output return valyes of a command if it's `undefined`"}],"description":"Starts a REPL with `prompt` as the prompt and `stream` for all I/O.\n\nYou can use your own `eval` function if it has the following signature:\n\n    function eval(cmd, callback) {\n      callback(null, result);\n    }\n\nMultiple REPLs can be started against the same running instance of node.  Each share the same global object but will have unique I/O.\n\n#### Example\n\nHere's an example that starts a REPL on stdin, a Unix socket, and a TCP socket:\n\n    var net = require(\"net\"),\n        repl = require(\"repl\");\n\n    connections = 0;\n\n    repl.start(\"node via stdin> \");\n\n    net.createServer(function (socket) {\n      connections += 1;\n      repl.start(\"node via Unix socket> \", socket);\n    }).listen(\"/tmp/node-repl-sock\");\n\n   net.createServer(function (socket) {\n      connections += 1;\n      repl.start(\"node via TCP socket> \", socket);\n    }).listen(5001);","short_description":"Starts a REPL with `prompt` as the prompt and `stream` for all I/O.\n","ellipsis_description":"Starts a REPL with `prompt` as the prompt and `stream` for all I/O.\n ...","line":113,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Concepts/repl.js#L113","name":"start","path":"repl.start"}],"parentDir":"nodejs_ref_guidev0.6.7","subclasses":[],"href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Concepts/repl.js#L72","name":"repl","path":"repl"},"repl.start":{"id":"repl.start","type":"class method","signatures":[{"args":[{"name":"prompt","default_value":"&gt; ","optional":true},{"name":"stream","default_value":"process.stdin","optional":true},{"name":"eval","default_value":"eval","optional":true},{"name":"useGlobal","default_value":false,"optional":true},{"name":"ignoreUndefined","default_value":false,"optional":true}]}],"arguments":[{"name":"prompt","types":["String"],"description":"The starting prompt"},{"name":"stream","types":["String"],"description":"The stream to read from"},{"name":"eval","types":["String"],"description":"An asynchronous wrapper function that executes after each line"},{"name":"useGlobal","types":["String"],"description":"If `true`, then the REPL uses the global objectm instead of scripts in a separate context"},{"name":"ignoreUndefined","types":["String"],"description":"If `true`, the REPL won't output return valyes of a command if it's `undefined`"}],"description":"Starts a REPL with `prompt` as the prompt and `stream` for all I/O.\n\nYou can use your own `eval` function if it has the following signature:\n\n    function eval(cmd, callback) {\n      callback(null, result);\n    }\n\nMultiple REPLs can be started against the same running instance of node.  Each share the same global object but will have unique I/O.\n\n#### Example\n\nHere's an example that starts a REPL on stdin, a Unix socket, and a TCP socket:\n\n    var net = require(\"net\"),\n        repl = require(\"repl\");\n\n    connections = 0;\n\n    repl.start(\"node via stdin> \");\n\n    net.createServer(function (socket) {\n      connections += 1;\n      repl.start(\"node via Unix socket> \", socket);\n    }).listen(\"/tmp/node-repl-sock\");\n\n   net.createServer(function (socket) {\n      connections += 1;\n      repl.start(\"node via TCP socket> \", socket);\n    }).listen(5001);","short_description":"Starts a REPL with `prompt` as the prompt and `stream` for all I/O.\n","ellipsis_description":"Starts a REPL with `prompt` as the prompt and `stream` for all I/O.\n ...","line":113,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Concepts/repl.js#L113","name":"start","path":"repl.start"}}
{"buffer":{"id":"buffer","type":"class","description":"A `Buffer` is similar to an array of integers, but corresponds to a raw memory allocation outside the V8 heap.  While pure Javascript is Unicode friendly, it is not nice to binary data.  When dealing with TCP streams or the file system, it's necessary to handle octet streams. Node.js has several strategies for manipulating, creating, and consuming these octet streams (and raw data) within the `Buffer` object.\n\nNote that:\n- A `Buffer` cannot be resized\n- The `Buffer` object is global (meaning, you don't need to `require()` anything)\n\nConverting between Buffers and Javascript string objects requires an explicit encoding defined. Those string encodings are:\n\n* `'ascii'`: for 7-bit ASCII data only. This encoding method is very fast, and strips the high bit if set.  Note that this encoding converts a `null` character (`'\\0'` or `'\\u0000'`) into `0x20` (character code of a space). If you want to convert a `null` character into `0x00`, you should use the `'utf8'` encoding.\n\n* `'utf8'`: multi-byte encoded Unicode characters.  Many web pages and other document formats use UTF-8.\n\n* `'ucs2'`: 2-bytes, little endian encoded Unicode characters. It can encode only BMP (Basic Multilingual Plane&mdash;from U+0000 to U+FFFF).\n\n* `'base64'`: Base64 string encoding\n\n* `'binary'`: A way of encoding raw binary data into strings by using only the first 8 bits of each character. This encoding method is deprecated and should be avoided in favor of `Buffer` objects where possible. This encoding is going to be removed in future versions of Node.js.\n\n* `'hex'`: Encodes each byte as two hexidecimal characters.\n\nIn most cases, the default of `'utf8'` is used.\n\n\nFor more information, see [this article on understanding buffers](../nodejs_dev_guide/how-to-use-buffers.html).","short_description":"A `Buffer` is similar to an array of integers, but corresponds to a raw memory allocation outside the V8 heap.  While pure Javascript is Unicode friendly, it is not nice to binary data.  When dealing with TCP streams or the file system, it's necessary to handle octet streams. Node.js has several strategies for manipulating, creating, and consuming these octet streams (and raw data) within the `Buffer` object.\n","ellipsis_description":"A `Buffer` is similar to an array of integers, but corresponds to a raw memory allocation outside the V8 heap.  Whil...","line":30,"aliases":[],"children":[{"id":"buffer._charsWritten","type":"class property","signatures":[{"returns":[{"type":"Number"}]}],"description":"The number of characters written by [[buffer.write `buffer.write()`]]. This value is overwritten each time `buffer.write()` is called.","short_description":"The number of characters written by [[buffer.write `buffer.write()`]]. This value is overwritten each time `buffer.write()` is called.","ellipsis_description":"The number of characters written by [[buffer.write `buffer.write()`]]. This value is overwritten each time `buffer.w...","line":582,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L582","name":"_charsWritten","path":"buffer._charsWritten"},{"id":"buffer.byteLength","type":"class method","signatures":[{"args":[{"name":"string"},{"name":"encoding","default_value":"utf8"}],"returns":[{"type":"Number"}]}],"arguments":[{"name":"string","types":["String"],"description":"The string to check"},{"name":"encoding","types":["String"],"description":"The encoding that the string is in"}],"description":"Gives the actual byte length of a string.  This is not the same as `String.length` since that returns the number of _characters_ in a string.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.byteLength.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>\n\n#### Returns\n\nReturns the byte length of a buffer","short_description":"Gives the actual byte length of a string.  This is not the same as `String.length` since that returns the number of _characters_ in a string.\n","ellipsis_description":"Gives the actual byte length of a string.  This is not the same as `String.length` since that returns the number of ...","line":63,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L63","name":"byteLength","path":"buffer.byteLength"},{"id":"buffer.copy","type":"class method","signatures":[{"args":[{"name":"targetBuffer"},{"name":"targetStart","default_value":0},{"name":"sourceStart","default_value":0},{"name":"sourceEnd","default_value":"buffer.length"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"targetBuffer","types":["Buffer"],"description":"The buffer to copy into"},{"name":"targetStart","types":["Number"],"description":"The offset to start at for the buffer you're copying into"},{"name":"sourceStart","types":["Number"],"description":"The offset to start at for the buffer you're copying from"},{"name":"sourceEnd","types":["Number"],"description":"The number of bytes to read from the originating buffer. Defaults to the length of the buffer"}],"description":"Performs a copy between buffers. The source and target regions can overlap.\n\n#### Example: Building two buffers\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.copy.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Performs a copy between buffers. The source and target regions can overlap.\n","ellipsis_description":"Performs a copy between buffers. The source and target regions can overlap.\n ...","line":78,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L78","name":"copy","path":"buffer.copy"},{"id":"buffer.fill","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset","default_value":0},{"name":"end","default_value":"buffer.length"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["Object"],"description":"The value to use to fill the buffer"},{"name":"offset","types":["Number"],"description":"The position in the buffer to start filling at"},{"name":"end","types":["Number"],"description":"The position in the buffer to stop filling at"}],"description":"Fills the buffer with the specified value. If the offset and end are not given, this fills the entire buffer.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.fill.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Fills the buffer with the specified value. If the offset and end are not given, this fills the entire buffer.\n","ellipsis_description":"Fills the buffer with the specified value. If the offset and end are not given, this fills the entire buffer.\n ...","line":93,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L93","name":"fill","path":"buffer.fill"},{"id":"buffer.index","type":"class property","signatures":[{"returns":[{"type":"Number"}]}],"description":"Gets and sets the octet at `index` in an array format. The values refer to individual bytes, so the legal range is between `0x00` and `0xFF` hex or `0` and `255`.\n\n#### Example: Copy an ASCII string into a buffer, one byte at a time\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.index.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Gets and sets the octet at `index` in an array format. The values refer to individual bytes, so the legal range is between `0x00` and `0xFF` hex or `0` and `255`.\n","ellipsis_description":"Gets and sets the octet at `index` in an array format. The values refer to individual bytes, so the legal range is b...","line":576,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L576","name":"index","path":"buffer.index"},{"id":"buffer.INSPECT_MAX_BYTES","type":"constant","signatures":[{"returns":[{"type":"50"}]}],"description":"The number of bytes returned when `buffer.inspect()` is called. This can be overridden by user modules.","short_description":"The number of bytes returned when `buffer.inspect()` is called. This can be overridden by user modules.","ellipsis_description":"The number of bytes returned when `buffer.inspect()` is called. This can be overridden by user modules. ...","line":604,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L604","name":"INSPECT_MAX_BYTES","path":"buffer.INSPECT_MAX_BYTES"},{"id":"buffer.isBuffer","type":"class method","signatures":[{"args":[{"name":"obj"}],"returns":[{"type":"Boolean"}]}],"arguments":[{"name":"obj","types":["Object"],"description":"The object to check"}],"description":"Returns `true` if `obj` is a `Buffer`.","short_description":"Returns `true` if `obj` is a `Buffer`.","ellipsis_description":"Returns `true` if `obj` is a `Buffer`. ...","line":104,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L104","name":"isBuffer","path":"buffer.isBuffer"},{"id":"buffer.length","type":"class property","signatures":[{"returns":[{"type":"Number"}]}],"description":"The size of the buffer in bytes.  Note that this is not necessarily the size of the contents. `length` refers to the amount of memory allocated for the buffer object.  It does not change when the contents of the buffer are changed.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.length.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"The size of the buffer in bytes.  Note that this is not necessarily the size of the contents. `length` refers to the amount of memory allocated for the buffer object.  It does not change when the contents of the buffer are changed.\n","ellipsis_description":"The size of the buffer in bytes.  Note that this is not necessarily the size of the contents. `length` refers to the...","line":595,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L595","name":"length","path":"buffer.length"},{"id":"new buffer","type":"constructor","signatures":[{"args":[{"name":"array"}]},{"args":[{"name":"size"}]},{"args":[{"name":"str"},{"name":"encoding","default_value":"utf8"}]}],"description":"Allocates a new buffer, either:\n\n- using an `array` of octects\n- allocating with a specific `size`\n- from a `string` with the specified `encoding`\n\n#### Example\n\n   var bBuffer = new Buffer(\"This is a buffer.\", \"utf8\");","short_description":"Allocates a new buffer, either:\n","ellipsis_description":"Allocates a new buffer, either:\n ...","line":46,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L46","name":"new","path":"buffer.new"},{"id":"buffer.readDoubleBE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a 64-bit double from the buffer at the specified offset in big endian notation.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readDoubleBELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads a 64-bit double from the buffer at the specified offset in big endian notation.\n","ellipsis_description":"Reads a 64-bit double from the buffer at the specified offset in big endian notation.\n ...","line":118,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L118","name":"readDoubleBE","path":"buffer.readDoubleBE"},{"id":"buffer.readDoubleLE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a 64 bit double from the buffer at the specified offset in little endian notation.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readDoubleBELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads a 64 bit double from the buffer at the specified offset in little endian notation.\n","ellipsis_description":"Reads a 64 bit double from the buffer at the specified offset in little endian notation.\n ...","line":133,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L133","name":"readDoubleLE","path":"buffer.readDoubleLE"},{"id":"buffer.readFloatBE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a 32 bit float from the buffer at the specified offset in big endian notation.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readFloatBELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads a 32 bit float from the buffer at the specified offset in big endian notation.\n","ellipsis_description":"Reads a 32 bit float from the buffer at the specified offset in big endian notation.\n ...","line":148,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L148","name":"readFloatBE","path":"buffer.readFloatBE"},{"id":"buffer.readFloatLE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a 32 bit float from the buffer at the specified offset in little endian notation.\n\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readFloatBELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads a 32 bit float from the buffer at the specified offset in little endian notation.\n","ellipsis_description":"Reads a 32 bit float from the buffer at the specified offset in little endian notation.\n ...","line":163,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L163","name":"readFloatLE","path":"buffer.readFloatLE"},{"id":"buffer.readInt16BE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a signed 16 bit integer from the buffer at the specified offset in big endian notation.\n\nThis function also works as [[buffer.readUInt16BE `buffer.readUInt16BE()`]], except buffer contents are treated as a two's complement signed values.","short_description":"Reads a signed 16 bit integer from the buffer at the specified offset in big endian notation.\n","ellipsis_description":"Reads a signed 16 bit integer from the buffer at the specified offset in big endian notation.\n ...","line":190,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L190","name":"readInt16BE","path":"buffer.readInt16BE"},{"id":"buffer.readInt16LE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a signed 16 bit integer from the buffer at the specified offset in little endian notation.\n\nThis function also works as [[buffer.readUInt16LE `buffer.readUInt16LE()`]], except buffer contents are treated as a two'scomplement signed values.","short_description":"Reads a signed 16 bit integer from the buffer at the specified offset in little endian notation.\n","ellipsis_description":"Reads a signed 16 bit integer from the buffer at the specified offset in little endian notation.\n ...","line":204,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L204","name":"readInt16LE","path":"buffer.readInt16LE"},{"id":"buffer.readInt32BE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a signed 32 bit integer from the buffer at the specified offset in big endian notation.\n\nThis function works like [[buffer.readUInt32BE `buffer.readUInt32BE()`]], except buffer contents are treated as a two's complement signed values.","short_description":"Reads a signed 32 bit integer from the buffer at the specified offset in big endian notation.\n","ellipsis_description":"Reads a signed 32 bit integer from the buffer at the specified offset in big endian notation.\n ...","line":217,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L217","name":"readInt32BE","path":"buffer.readInt32BE"},{"id":"buffer.readInt32LE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a signed 32 bit integer from the buffer at the specified offset in little endian notation.\n\nThis function works like [[buffer.readUInt32LE `buffer.readUInt32LE()`]], except buffer contents are treated as a two's complement signed values.","short_description":"Reads a signed 32 bit integer from the buffer at the specified offset in little endian notation.\n","ellipsis_description":"Reads a signed 32 bit integer from the buffer at the specified offset in little endian notation.\n ...","line":231,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L231","name":"readInt32LE","path":"buffer.readInt32LE"},{"id":"buffer.readInt8","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a signed 8 bit integer from the buffer at the specified offset.\n\nThis function also works as [[buffer.readUInt8 `buffer.readUInt8()`]], except buffer contents are treated as two's complement signed values.","short_description":"Reads a signed 8 bit integer from the buffer at the specified offset.\n","ellipsis_description":"Reads a signed 8 bit integer from the buffer at the specified offset.\n ...","line":176,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L176","name":"readInt8","path":"buffer.readInt8"},{"id":"buffer.readUInt16BE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads an unsigned 16 bit integer from the buffer at the specified offset in the big endian format.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readUInt16BELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads an unsigned 16 bit integer from the buffer at the specified offset in the big endian format.\n","ellipsis_description":"Reads an unsigned 16 bit integer from the buffer at the specified offset in the big endian format.\n ...","line":260,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L260","name":"readUInt16BE","path":"buffer.readUInt16BE"},{"id":"buffer.readUInt16LE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads an unsigned 16 bit integer from the buffer at the specified offset in the little endian format.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readUInt16BELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads an unsigned 16 bit integer from the buffer at the specified offset in the little endian format.\n","ellipsis_description":"Reads an unsigned 16 bit integer from the buffer at the specified offset in the little endian format.\n ...","line":274,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L274","name":"readUInt16LE","path":"buffer.readUInt16LE"},{"id":"buffer.readUInt32BE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads an unsigned 32 bit integer from the buffer at the specified offset in the big endian format.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readUInt32BELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads an unsigned 32 bit integer from the buffer at the specified offset in the big endian format.\n","ellipsis_description":"Reads an unsigned 32 bit integer from the buffer at the specified offset in the big endian format.\n ...","line":288,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L288","name":"readUInt32BE","path":"buffer.readUInt32BE"},{"id":"buffer.readUInt32LE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads an unsigned 32 bit integer from the buffer at the specified offset in the little endian format.\n\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readUInt32BELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads an unsigned 32 bit integer from the buffer at the specified offset in the little endian format.\n","ellipsis_description":"Reads an unsigned 32 bit integer from the buffer at the specified offset in the little endian format.\n ...","line":303,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L303","name":"readUInt32LE","path":"buffer.readUInt32LE"},{"id":"buffer.readUInt8","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads an unsigned 8 bit integer from the buffer at the specified offset.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readUInt8.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads an unsigned 8 bit integer from the buffer at the specified offset.\n","ellipsis_description":"Reads an unsigned 8 bit integer from the buffer at the specified offset.\n ...","line":246,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L246","name":"readUInt8","path":"buffer.readUInt8"},{"id":"buffer.slice","type":"class method","signatures":[{"args":[{"name":"start"},{"name":"end","default_value":"buffer.length"}],"returns":[{"type":"Buffer"}]}],"arguments":[{"name":"start","types":["Number"],"description":"The offset in the buffer to start from"},{"name":"end","types":["Number"],"description":"The position of the last byte to slice. Defaults to the length of the buffer"}],"description":"Returns a new buffer that references the same memory as the old, but offset and cropped by the `start` and `end` indexes.\n\n<Note>Modifying the new buffer slice modifies memory in the original buffer!</Note>\n\n#### Example\n\nBuilding a `Buffer` with the ASCII alphabet, taking a slice, then modifying one byte from the original `Buffer`:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readUInt32LE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Returns a new buffer that references the same memory as the old, but offset and cropped by the `start` and `end` indexes.\n","ellipsis_description":"Returns a new buffer that references the same memory as the old, but offset and cropped by the `start` and `end` ind...","line":321,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L321","name":"slice","path":"buffer.slice"},{"id":"buffer.toString","type":"class method","signatures":[{"args":[{"name":"encoding","default_value":"utf8"},{"name":"start","default_value":0},{"name":"end","default_value":"buffer.length"}],"returns":[{"type":"String"}]}],"arguments":[{"name":"encoding","types":["String"],"description":"The encoding to use; defaults to `utf8`"},{"name":"start","types":["Number"],"description":"The starting byte offset; defaults to `0`"},{"name":"end","types":["Number"],"description":"The number of bytes to write; defaults to the length of the buffer"}],"related_to":"buffer.write","description":"Decodes and returns a string from buffer data encoded with `encoding` beginning at `start` and ending at `end`.","short_description":"Decodes and returns a string from buffer data encoded with `encoding` beginning at `start` and ending at `end`.","ellipsis_description":"Decodes and returns a string from buffer data encoded with `encoding` beginning at `start` and ending at `end`. ...","line":333,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L333","name":"toString","path":"buffer.toString"},{"id":"buffer.write","type":"class method","signatures":[{"args":[{"name":"string"},{"name":"offset","default_value":0},{"name":"length","default_value":"startPos"},{"name":"encoding","default_value":"utf8"}],"returns":[{"type":"Number"}]}],"arguments":[{"name":"string","types":["String"],"description":"The string to write"},{"name":"offset","types":["Number"],"description":"The starting byte offset"},{"name":"length","types":["Number"],"description":"The number of bytes to write; defaults to the length of the buffer minus any offset (`buffer.length` - `buffer.offset`)"},{"name":"encoding","types":["String"],"description":"The encoding to use; defaults to `utf8`"}],"description":"Writes a `string` to the buffer at `offset` using the given encoding. `length` is the number of bytes to write. If `buffer` does not contain enough space to fit the entire string, it instead writes a partial amount of the string. The method doesn't write partial characters.\n\n\n#### Example\n\nWriting a utf8 string into a buffer, then printing it:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.write.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>\n\n#### Returns\n\nReturns number of octets written.","short_description":"Writes a `string` to the buffer at `offset` using the given encoding. `length` is the number of bytes to write. If `buffer` does not contain enough space to fit the entire string, it instead writes a partial amount of the string. The method doesn't write partial characters.\n","ellipsis_description":"Writes a `string` to the buffer at `offset` using the given encoding. `length` is the number of bytes to write. If `...","line":355,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L355","name":"write","path":"buffer.write"},{"id":"buffer.writeDoubleBE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid 64 bit double.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeDoubleBELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid 64 bit double.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid 64 ...","line":370,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L370","name":"writeDoubleBE","path":"buffer.writeDoubleBE"},{"id":"buffer.writeDoubleLE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid 64 bit double.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeDoubleBELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid 64 bit double.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid ...","line":385,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L385","name":"writeDoubleLE","path":"buffer.writeDoubleLE"},{"id":"buffer.writeFloatBE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid 32 bit float.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeFloatBELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid 32 bit float.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid 32 ...","line":400,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L400","name":"writeFloatBE","path":"buffer.writeFloatBE"},{"id":"buffer.writeFloatLE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid 32 bit float.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeFloatBELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid 32 bit float.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid ...","line":415,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L415","name":"writeFloatLE","path":"buffer.writeFloatLE"},{"id":"buffer.writeInt16BE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid signed 16 bit integer.\n\nThis function also works as `buffer.writeUInt16*()`, except value is written out as a two's complement signed integer into `buffer`.","short_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid signed 16 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid sig...","line":444,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L444","name":"writeInt16BE","path":"buffer.writeInt16BE"},{"id":"buffer.writeInt16LE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":"alse"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid signed 16 bit integer.\n\nThis function also works as `buffer.writeUInt16*()`, except value is written out as a two's complement signed integer into `buffer`.","short_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid signed 16 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid ...","line":458,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L458","name":"writeInt16LE","path":"buffer.writeInt16LE"},{"id":"buffer.writeInt32BE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid signed 32 bit integer.\n\nThis function also works as `buffer.writeUInt32*`, except value is written out as a two's complement signed integer into `buffer`.","short_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid signed 32 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid sig...","line":472,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L472","name":"writeInt32BE","path":"buffer.writeInt32BE"},{"id":"buffer.writeInt32LE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid signed 32 bit integer.\n\nThis function also works as `buffer.writeUInt32*`, except value is written out as a two's complement signed integer into `buffer`.","short_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid signed 32 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid ...","line":486,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L486","name":"writeInt32LE","path":"buffer.writeInt32LE"},{"id":"buffer.writeInt8","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset. Note that `value` must be a valid signed 8 bit integer.\n\nWorks as `buffer.writeUInt8()`, except value is written out as a two's complement signed integer into `buffer`.","short_description":"Writes `value` to the buffer at the specified offset. Note that `value` must be a valid signed 8 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset. Note that `value` must be a valid signed 8 bit integer.\n ...","line":430,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L430","name":"writeInt8","path":"buffer.writeInt8"},{"id":"buffer.writeUInt16BE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid unsigned 16 bit integer.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeUInt16BELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid unsigned 16 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid uns...","line":516,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L516","name":"writeUInt16BE","path":"buffer.writeUInt16BE"},{"id":"buffer.writeUInt16LE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset"}],"description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid unsigned 16 bit integer.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeUInt16BELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid unsigned 16 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid ...","line":532,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L532","name":"writeUInt16LE","path":"buffer.writeUInt16LE"},{"id":"buffer.writeUInt32BE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid unsigned 32 bit integer.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeUInt32BELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid unsigned 32 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid uns...","line":548,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L548","name":"writeUInt32BE","path":"buffer.writeUInt32BE"},{"id":"buffer.writeUInt32LE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset"}],"description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid unsigned 32 bit integer.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeUInt32BELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid unsigned 32 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid ...","line":564,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L564","name":"writeUInt32LE","path":"buffer.writeUInt32LE"},{"id":"buffer.writeUInt8","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset. Note that `value` must be a valid unsigned 8 bit integer.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeUInt8.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset. Note that `value` must be a valid unsigned 8 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset. Note that `value` must be a valid unsigned 8 bit integer.\n ...","line":501,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L501","name":"writeUInt8","path":"buffer.writeUInt8"}],"parentDir":"nodejs_ref_guidev0.6.7","subclasses":[],"href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L30","name":"buffer","path":"buffer"},"buffer.INSPECT_MAX_BYTES":{"id":"buffer.INSPECT_MAX_BYTES","type":"constant","signatures":[{"returns":[{"type":"50"}]}],"description":"The number of bytes returned when `buffer.inspect()` is called. This can be overridden by user modules.","short_description":"The number of bytes returned when `buffer.inspect()` is called. This can be overridden by user modules.","ellipsis_description":"The number of bytes returned when `buffer.inspect()` is called. This can be overridden by user modules. ...","line":604,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L604","name":"INSPECT_MAX_BYTES","path":"buffer.INSPECT_MAX_BYTES"},"buffer._charsWritten":{"id":"buffer._charsWritten","type":"class property","signatures":[{"returns":[{"type":"Number"}]}],"description":"The number of characters written by [[buffer.write `buffer.write()`]]. This value is overwritten each time `buffer.write()` is called.","short_description":"The number of characters written by [[buffer.write `buffer.write()`]]. This value is overwritten each time `buffer.write()` is called.","ellipsis_description":"The number of characters written by [[buffer.write `buffer.write()`]]. This value is overwritten each time `buffer.w...","line":582,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L582","name":"_charsWritten","path":"buffer._charsWritten"},"buffer.byteLength":{"id":"buffer.byteLength","type":"class method","signatures":[{"args":[{"name":"string"},{"name":"encoding","default_value":"utf8"}],"returns":[{"type":"Number"}]}],"arguments":[{"name":"string","types":["String"],"description":"The string to check"},{"name":"encoding","types":["String"],"description":"The encoding that the string is in"}],"description":"Gives the actual byte length of a string.  This is not the same as `String.length` since that returns the number of _characters_ in a string.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.byteLength.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>\n\n#### Returns\n\nReturns the byte length of a buffer","short_description":"Gives the actual byte length of a string.  This is not the same as `String.length` since that returns the number of _characters_ in a string.\n","ellipsis_description":"Gives the actual byte length of a string.  This is not the same as `String.length` since that returns the number of ...","line":63,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L63","name":"byteLength","path":"buffer.byteLength"},"buffer.copy":{"id":"buffer.copy","type":"class method","signatures":[{"args":[{"name":"targetBuffer"},{"name":"targetStart","default_value":0},{"name":"sourceStart","default_value":0},{"name":"sourceEnd","default_value":"buffer.length"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"targetBuffer","types":["Buffer"],"description":"The buffer to copy into"},{"name":"targetStart","types":["Number"],"description":"The offset to start at for the buffer you're copying into"},{"name":"sourceStart","types":["Number"],"description":"The offset to start at for the buffer you're copying from"},{"name":"sourceEnd","types":["Number"],"description":"The number of bytes to read from the originating buffer. Defaults to the length of the buffer"}],"description":"Performs a copy between buffers. The source and target regions can overlap.\n\n#### Example: Building two buffers\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.copy.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Performs a copy between buffers. The source and target regions can overlap.\n","ellipsis_description":"Performs a copy between buffers. The source and target regions can overlap.\n ...","line":78,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L78","name":"copy","path":"buffer.copy"},"buffer.fill":{"id":"buffer.fill","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset","default_value":0},{"name":"end","default_value":"buffer.length"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["Object"],"description":"The value to use to fill the buffer"},{"name":"offset","types":["Number"],"description":"The position in the buffer to start filling at"},{"name":"end","types":["Number"],"description":"The position in the buffer to stop filling at"}],"description":"Fills the buffer with the specified value. If the offset and end are not given, this fills the entire buffer.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.fill.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Fills the buffer with the specified value. If the offset and end are not given, this fills the entire buffer.\n","ellipsis_description":"Fills the buffer with the specified value. If the offset and end are not given, this fills the entire buffer.\n ...","line":93,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L93","name":"fill","path":"buffer.fill"},"buffer.index":{"id":"buffer.index","type":"class property","signatures":[{"returns":[{"type":"Number"}]}],"description":"Gets and sets the octet at `index` in an array format. The values refer to individual bytes, so the legal range is between `0x00` and `0xFF` hex or `0` and `255`.\n\n#### Example: Copy an ASCII string into a buffer, one byte at a time\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.index.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Gets and sets the octet at `index` in an array format. The values refer to individual bytes, so the legal range is between `0x00` and `0xFF` hex or `0` and `255`.\n","ellipsis_description":"Gets and sets the octet at `index` in an array format. The values refer to individual bytes, so the legal range is b...","line":576,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L576","name":"index","path":"buffer.index"},"buffer.isBuffer":{"id":"buffer.isBuffer","type":"class method","signatures":[{"args":[{"name":"obj"}],"returns":[{"type":"Boolean"}]}],"arguments":[{"name":"obj","types":["Object"],"description":"The object to check"}],"description":"Returns `true` if `obj` is a `Buffer`.","short_description":"Returns `true` if `obj` is a `Buffer`.","ellipsis_description":"Returns `true` if `obj` is a `Buffer`. ...","line":104,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L104","name":"isBuffer","path":"buffer.isBuffer"},"buffer.length":{"id":"buffer.length","type":"class property","signatures":[{"returns":[{"type":"Number"}]}],"description":"The size of the buffer in bytes.  Note that this is not necessarily the size of the contents. `length` refers to the amount of memory allocated for the buffer object.  It does not change when the contents of the buffer are changed.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.length.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"The size of the buffer in bytes.  Note that this is not necessarily the size of the contents. `length` refers to the amount of memory allocated for the buffer object.  It does not change when the contents of the buffer are changed.\n","ellipsis_description":"The size of the buffer in bytes.  Note that this is not necessarily the size of the contents. `length` refers to the...","line":595,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L595","name":"length","path":"buffer.length"},"buffer.new":{"id":"new buffer","type":"constructor","signatures":[{"args":[{"name":"array"}]},{"args":[{"name":"size"}]},{"args":[{"name":"str"},{"name":"encoding","default_value":"utf8"}]}],"description":"Allocates a new buffer, either:\n\n- using an `array` of octects\n- allocating with a specific `size`\n- from a `string` with the specified `encoding`\n\n#### Example\n\n   var bBuffer = new Buffer(\"This is a buffer.\", \"utf8\");","short_description":"Allocates a new buffer, either:\n","ellipsis_description":"Allocates a new buffer, either:\n ...","line":46,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L46","name":"new","path":"buffer.new"},"buffer.readDoubleBE":{"id":"buffer.readDoubleBE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a 64-bit double from the buffer at the specified offset in big endian notation.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readDoubleBELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads a 64-bit double from the buffer at the specified offset in big endian notation.\n","ellipsis_description":"Reads a 64-bit double from the buffer at the specified offset in big endian notation.\n ...","line":118,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L118","name":"readDoubleBE","path":"buffer.readDoubleBE"},"buffer.readDoubleLE":{"id":"buffer.readDoubleLE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a 64 bit double from the buffer at the specified offset in little endian notation.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readDoubleBELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads a 64 bit double from the buffer at the specified offset in little endian notation.\n","ellipsis_description":"Reads a 64 bit double from the buffer at the specified offset in little endian notation.\n ...","line":133,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L133","name":"readDoubleLE","path":"buffer.readDoubleLE"},"buffer.readFloatBE":{"id":"buffer.readFloatBE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a 32 bit float from the buffer at the specified offset in big endian notation.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readFloatBELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads a 32 bit float from the buffer at the specified offset in big endian notation.\n","ellipsis_description":"Reads a 32 bit float from the buffer at the specified offset in big endian notation.\n ...","line":148,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L148","name":"readFloatBE","path":"buffer.readFloatBE"},"buffer.readFloatLE":{"id":"buffer.readFloatLE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a 32 bit float from the buffer at the specified offset in little endian notation.\n\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readFloatBELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads a 32 bit float from the buffer at the specified offset in little endian notation.\n","ellipsis_description":"Reads a 32 bit float from the buffer at the specified offset in little endian notation.\n ...","line":163,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L163","name":"readFloatLE","path":"buffer.readFloatLE"},"buffer.readInt16BE":{"id":"buffer.readInt16BE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a signed 16 bit integer from the buffer at the specified offset in big endian notation.\n\nThis function also works as [[buffer.readUInt16BE `buffer.readUInt16BE()`]], except buffer contents are treated as a two's complement signed values.","short_description":"Reads a signed 16 bit integer from the buffer at the specified offset in big endian notation.\n","ellipsis_description":"Reads a signed 16 bit integer from the buffer at the specified offset in big endian notation.\n ...","line":190,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L190","name":"readInt16BE","path":"buffer.readInt16BE"},"buffer.readInt16LE":{"id":"buffer.readInt16LE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a signed 16 bit integer from the buffer at the specified offset in little endian notation.\n\nThis function also works as [[buffer.readUInt16LE `buffer.readUInt16LE()`]], except buffer contents are treated as a two'scomplement signed values.","short_description":"Reads a signed 16 bit integer from the buffer at the specified offset in little endian notation.\n","ellipsis_description":"Reads a signed 16 bit integer from the buffer at the specified offset in little endian notation.\n ...","line":204,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L204","name":"readInt16LE","path":"buffer.readInt16LE"},"buffer.readInt32BE":{"id":"buffer.readInt32BE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a signed 32 bit integer from the buffer at the specified offset in big endian notation.\n\nThis function works like [[buffer.readUInt32BE `buffer.readUInt32BE()`]], except buffer contents are treated as a two's complement signed values.","short_description":"Reads a signed 32 bit integer from the buffer at the specified offset in big endian notation.\n","ellipsis_description":"Reads a signed 32 bit integer from the buffer at the specified offset in big endian notation.\n ...","line":217,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L217","name":"readInt32BE","path":"buffer.readInt32BE"},"buffer.readInt32LE":{"id":"buffer.readInt32LE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a signed 32 bit integer from the buffer at the specified offset in little endian notation.\n\nThis function works like [[buffer.readUInt32LE `buffer.readUInt32LE()`]], except buffer contents are treated as a two's complement signed values.","short_description":"Reads a signed 32 bit integer from the buffer at the specified offset in little endian notation.\n","ellipsis_description":"Reads a signed 32 bit integer from the buffer at the specified offset in little endian notation.\n ...","line":231,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L231","name":"readInt32LE","path":"buffer.readInt32LE"},"buffer.readInt8":{"id":"buffer.readInt8","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads a signed 8 bit integer from the buffer at the specified offset.\n\nThis function also works as [[buffer.readUInt8 `buffer.readUInt8()`]], except buffer contents are treated as two's complement signed values.","short_description":"Reads a signed 8 bit integer from the buffer at the specified offset.\n","ellipsis_description":"Reads a signed 8 bit integer from the buffer at the specified offset.\n ...","line":176,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L176","name":"readInt8","path":"buffer.readInt8"},"buffer.readUInt16BE":{"id":"buffer.readUInt16BE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads an unsigned 16 bit integer from the buffer at the specified offset in the big endian format.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readUInt16BELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads an unsigned 16 bit integer from the buffer at the specified offset in the big endian format.\n","ellipsis_description":"Reads an unsigned 16 bit integer from the buffer at the specified offset in the big endian format.\n ...","line":260,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L260","name":"readUInt16BE","path":"buffer.readUInt16BE"},"buffer.readUInt16LE":{"id":"buffer.readUInt16LE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads an unsigned 16 bit integer from the buffer at the specified offset in the little endian format.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readUInt16BELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads an unsigned 16 bit integer from the buffer at the specified offset in the little endian format.\n","ellipsis_description":"Reads an unsigned 16 bit integer from the buffer at the specified offset in the little endian format.\n ...","line":274,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L274","name":"readUInt16LE","path":"buffer.readUInt16LE"},"buffer.readUInt32BE":{"id":"buffer.readUInt32BE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads an unsigned 32 bit integer from the buffer at the specified offset in the big endian format.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readUInt32BELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads an unsigned 32 bit integer from the buffer at the specified offset in the big endian format.\n","ellipsis_description":"Reads an unsigned 32 bit integer from the buffer at the specified offset in the big endian format.\n ...","line":288,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L288","name":"readUInt32BE","path":"buffer.readUInt32BE"},"buffer.readUInt32LE":{"id":"buffer.readUInt32LE","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads an unsigned 32 bit integer from the buffer at the specified offset in the little endian format.\n\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readUInt32BELE.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads an unsigned 32 bit integer from the buffer at the specified offset in the little endian format.\n","ellipsis_description":"Reads an unsigned 32 bit integer from the buffer at the specified offset in the little endian format.\n ...","line":303,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L303","name":"readUInt32LE","path":"buffer.readUInt32LE"},"buffer.readUInt8":{"id":"buffer.readUInt8","type":"class method","signatures":[{"args":[{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"String"}]}],"arguments":[{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Reads an unsigned 8 bit integer from the buffer at the specified offset.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readUInt8.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Reads an unsigned 8 bit integer from the buffer at the specified offset.\n","ellipsis_description":"Reads an unsigned 8 bit integer from the buffer at the specified offset.\n ...","line":246,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L246","name":"readUInt8","path":"buffer.readUInt8"},"buffer.slice":{"id":"buffer.slice","type":"class method","signatures":[{"args":[{"name":"start"},{"name":"end","default_value":"buffer.length"}],"returns":[{"type":"Buffer"}]}],"arguments":[{"name":"start","types":["Number"],"description":"The offset in the buffer to start from"},{"name":"end","types":["Number"],"description":"The position of the last byte to slice. Defaults to the length of the buffer"}],"description":"Returns a new buffer that references the same memory as the old, but offset and cropped by the `start` and `end` indexes.\n\n<Note>Modifying the new buffer slice modifies memory in the original buffer!</Note>\n\n#### Example\n\nBuilding a `Buffer` with the ASCII alphabet, taking a slice, then modifying one byte from the original `Buffer`:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.readUInt32LE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Returns a new buffer that references the same memory as the old, but offset and cropped by the `start` and `end` indexes.\n","ellipsis_description":"Returns a new buffer that references the same memory as the old, but offset and cropped by the `start` and `end` ind...","line":321,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L321","name":"slice","path":"buffer.slice"},"buffer.toString":{"id":"buffer.toString","type":"class method","signatures":[{"args":[{"name":"encoding","default_value":"utf8"},{"name":"start","default_value":0},{"name":"end","default_value":"buffer.length"}],"returns":[{"type":"String"}]}],"arguments":[{"name":"encoding","types":["String"],"description":"The encoding to use; defaults to `utf8`"},{"name":"start","types":["Number"],"description":"The starting byte offset; defaults to `0`"},{"name":"end","types":["Number"],"description":"The number of bytes to write; defaults to the length of the buffer"}],"related_to":"buffer.write","description":"Decodes and returns a string from buffer data encoded with `encoding` beginning at `start` and ending at `end`.","short_description":"Decodes and returns a string from buffer data encoded with `encoding` beginning at `start` and ending at `end`.","ellipsis_description":"Decodes and returns a string from buffer data encoded with `encoding` beginning at `start` and ending at `end`. ...","line":333,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L333","name":"toString","path":"buffer.toString"},"buffer.write":{"id":"buffer.write","type":"class method","signatures":[{"args":[{"name":"string"},{"name":"offset","default_value":0},{"name":"length","default_value":"startPos"},{"name":"encoding","default_value":"utf8"}],"returns":[{"type":"Number"}]}],"arguments":[{"name":"string","types":["String"],"description":"The string to write"},{"name":"offset","types":["Number"],"description":"The starting byte offset"},{"name":"length","types":["Number"],"description":"The number of bytes to write; defaults to the length of the buffer minus any offset (`buffer.length` - `buffer.offset`)"},{"name":"encoding","types":["String"],"description":"The encoding to use; defaults to `utf8`"}],"description":"Writes a `string` to the buffer at `offset` using the given encoding. `length` is the number of bytes to write. If `buffer` does not contain enough space to fit the entire string, it instead writes a partial amount of the string. The method doesn't write partial characters.\n\n\n#### Example\n\nWriting a utf8 string into a buffer, then printing it:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.write.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>\n\n#### Returns\n\nReturns number of octets written.","short_description":"Writes a `string` to the buffer at `offset` using the given encoding. `length` is the number of bytes to write. If `buffer` does not contain enough space to fit the entire string, it instead writes a partial amount of the string. The method doesn't write partial characters.\n","ellipsis_description":"Writes a `string` to the buffer at `offset` using the given encoding. `length` is the number of bytes to write. If `...","line":355,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L355","name":"write","path":"buffer.write"},"buffer.writeDoubleBE":{"id":"buffer.writeDoubleBE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid 64 bit double.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeDoubleBELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid 64 bit double.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid 64 ...","line":370,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L370","name":"writeDoubleBE","path":"buffer.writeDoubleBE"},"buffer.writeDoubleLE":{"id":"buffer.writeDoubleLE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid 64 bit double.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeDoubleBELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid 64 bit double.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid ...","line":385,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L385","name":"writeDoubleLE","path":"buffer.writeDoubleLE"},"buffer.writeFloatBE":{"id":"buffer.writeFloatBE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid 32 bit float.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeFloatBELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid 32 bit float.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid 32 ...","line":400,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L400","name":"writeFloatBE","path":"buffer.writeFloatBE"},"buffer.writeFloatLE":{"id":"buffer.writeFloatLE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid 32 bit float.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeFloatBELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid 32 bit float.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid ...","line":415,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L415","name":"writeFloatLE","path":"buffer.writeFloatLE"},"buffer.writeInt16BE":{"id":"buffer.writeInt16BE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid signed 16 bit integer.\n\nThis function also works as `buffer.writeUInt16*()`, except value is written out as a two's complement signed integer into `buffer`.","short_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid signed 16 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid sig...","line":444,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L444","name":"writeInt16BE","path":"buffer.writeInt16BE"},"buffer.writeInt16LE":{"id":"buffer.writeInt16LE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":"alse"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid signed 16 bit integer.\n\nThis function also works as `buffer.writeUInt16*()`, except value is written out as a two's complement signed integer into `buffer`.","short_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid signed 16 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid ...","line":458,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L458","name":"writeInt16LE","path":"buffer.writeInt16LE"},"buffer.writeInt32BE":{"id":"buffer.writeInt32BE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid signed 32 bit integer.\n\nThis function also works as `buffer.writeUInt32*`, except value is written out as a two's complement signed integer into `buffer`.","short_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid signed 32 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid sig...","line":472,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L472","name":"writeInt32BE","path":"buffer.writeInt32BE"},"buffer.writeInt32LE":{"id":"buffer.writeInt32LE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid signed 32 bit integer.\n\nThis function also works as `buffer.writeUInt32*`, except value is written out as a two's complement signed integer into `buffer`.","short_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid signed 32 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid ...","line":486,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L486","name":"writeInt32LE","path":"buffer.writeInt32LE"},"buffer.writeInt8":{"id":"buffer.writeInt8","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset. Note that `value` must be a valid signed 8 bit integer.\n\nWorks as `buffer.writeUInt8()`, except value is written out as a two's complement signed integer into `buffer`.","short_description":"Writes `value` to the buffer at the specified offset. Note that `value` must be a valid signed 8 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset. Note that `value` must be a valid signed 8 bit integer.\n ...","line":430,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L430","name":"writeInt8","path":"buffer.writeInt8"},"buffer.writeUInt16BE":{"id":"buffer.writeUInt16BE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid unsigned 16 bit integer.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeUInt16BELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid unsigned 16 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid uns...","line":516,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L516","name":"writeUInt16BE","path":"buffer.writeUInt16BE"},"buffer.writeUInt16LE":{"id":"buffer.writeUInt16LE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset"}],"description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid unsigned 16 bit integer.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeUInt16BELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid unsigned 16 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid ...","line":532,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L532","name":"writeUInt16LE","path":"buffer.writeUInt16LE"},"buffer.writeUInt32BE":{"id":"buffer.writeUInt32BE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid unsigned 32 bit integer.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeUInt32BELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid unsigned 32 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the big endian format. Note that `value` must be a valid uns...","line":548,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L548","name":"writeUInt32BE","path":"buffer.writeUInt32BE"},"buffer.writeUInt32LE":{"id":"buffer.writeUInt32LE","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset"}],"description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid unsigned 32 bit integer.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeUInt32BELE.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid unsigned 32 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset in the little endian format. Note that `value` must be a valid ...","line":564,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L564","name":"writeUInt32LE","path":"buffer.writeUInt32LE"},"buffer.writeUInt8":{"id":"buffer.writeUInt8","type":"class method","signatures":[{"args":[{"name":"value"},{"name":"offset"},{"name":"noAssert","default_value":false}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"value","types":["String"],"description":"The content to write"},{"name":"offset","types":["Number"],"description":"The starting position"},{"name":"noAssert","types":["Boolean"],"description":"If `true`, skips the validation of the offset. This means that `offset` may be beyond the end of the buffer, and is typically not recommended."}],"description":"Writes `value` to the buffer at the specified offset. Note that `value` must be a valid unsigned 8 bit integer.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=buffer.writeUInt8.js&linestart=4&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Writes `value` to the buffer at the specified offset. Note that `value` must be a valid unsigned 8 bit integer.\n","ellipsis_description":"Writes `value` to the buffer at the specified offset. Note that `value` must be a valid unsigned 8 bit integer.\n ...","line":501,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/buffers.js#L501","name":"writeUInt8","path":"buffer.writeUInt8"}}
{"process":{"id":"process","type":"class","description":"The `process` object is a global object, and can be accessed from anywhere. It is an instance of [[EventEmitter `EventEmitter`]].\n\n\n#### Example: Handling Signal Events\n\nSignal events are emitted when processes receive a signal. See [sigaction(2)](http://www.kernel.org/doc/man-pages/online/pages/man2/sigaction.2.html) for a list of standard POSIX signal names such as SIGINT, SIGUSR1, etc.\n\n#### Example: Listening for `SIGINT`:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"The `process` object is a global object, and can be accessed from anywhere. It is an instance of [[EventEmitter `EventEmitter`]].\n","ellipsis_description":"The `process` object is a global object, and can be accessed from anywhere. It is an instance of [[EventEmitter `Eve...","line":16,"aliases":[],"children":[{"id":"process.arch","type":"class property","signatures":[{"returns":[{"type":"String"}]}],"description":"Identifies which processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.arch.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Identifies which processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.\n","ellipsis_description":"Identifies which processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.\n ...","line":237,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L237","name":"arch","path":"process.arch"},{"id":"process.argv","type":"class property","signatures":[{"returns":[{"type":"Array"}]}],"description":"An array containing the command line arguments.  The first element is 'node', and the second element is the name of the Javascript file.  The next elements will be any additional command line arguments.\n\n#### Example\n\nFirst, create a file called process.argv.js:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.argv.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>\n\nThen, using the Node.js REPL, type the following command:\n\n  $ node process-2.js one two=three four\n\nYou should see the following results:\n\n  0: node\n  1: <directoryPath>/process.js\n  2: one\n  3: two=three\n  4: four","short_description":"An array containing the command line arguments.  The first element is 'node', and the second element is the name of the Javascript file.  The next elements will be any additional command line arguments.\n","ellipsis_description":"An array containing the command line arguments.  The first element is 'node', and the second element is the name of ...","line":263,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L263","name":"argv","path":"process.argv"},{"id":"process.chdir","type":"class method","signatures":[{"args":[{"name":"directory"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"directory","types":["String"],"description":"The directory name to change to"}],"description":"Changes the current working directory of the process or throws an exception if that fails.\n\n#### Example\n\n    console.log('Starting at directory: ' + process.cwd());\n    try {\n      process.chdir('/tmp');\n      console.log('New directory: ' + process.cwd());\n    }\n    catch (err) {\n      console.log('chdir failed: ' + err);\n    }","short_description":"Changes the current working directory of the process or throws an exception if that fails.\n","ellipsis_description":"Changes the current working directory of the process or throws an exception if that fails.\n ...","line":68,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L68","name":"chdir","path":"process.chdir"},{"id":"process.cwd","type":"class method","signatures":[{"args":[],"returns":[{"type":"String"}]}],"description":"Returns the current working directory of the process. For example:\n\n  console.log('Current directory: ' + process.cwd());","short_description":"Returns the current working directory of the process. For example:\n","ellipsis_description":"Returns the current working directory of the process. For example:\n ...","line":78,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L78","name":"cwd","path":"process.cwd"},{"id":"process.env","type":"class property","signatures":[{"returns":[{"type":"Object"}]}],"description":"An object containing the user environment. For more information, see [environ(7)](http://kernel.org/doc/man-pages/online/pages/man7/environ.7.html).","short_description":"An object containing the user environment. For more information, see [environ(7)](http://kernel.org/doc/man-pages/online/pages/man7/environ.7.html).","ellipsis_description":"An object containing the user environment. For more information, see [environ(7)](http://kernel.org/doc/man-pages/on...","line":371,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L371","name":"env","path":"process.env"},{"id":"process.execPath","type":"class property","signatures":[{"returns":[{"type":"String"}]}],"description":"This is the absolute pathname of the executable that started the process.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.execpath.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>","short_description":"This is the absolute pathname of the executable that started the process.\n","ellipsis_description":"This is the absolute pathname of the executable that started the process.\n ...","line":275,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L275","name":"execPath","path":"process.execPath"},{"id":"process.exit","type":"class method","signatures":[{"args":[{"name":"code","default_value":0}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"code","types":["Number"],"description":"The code to end with"}],"description":"Ends the process with the specified `code`.\n\n#### Example: Exiting with a 'failure' code:\n\n    process.exit(1);\n\nThe shell that executed this should see the exit code as `1`.","short_description":"Ends the process with the specified `code`.\n","ellipsis_description":"Ends the process with the specified `code`.\n ...","line":94,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L94","name":"exit","path":"process.exit"},{"id":"process.getgid","type":"class method","signatures":[{"args":[],"returns":[{"type":"Number"}]}],"description":"Gets the group identity of the process. This is the numerical group id, not the group name. For more information, see [getgid(2)](http://kernel.org/doc/man-pages/online/pages/man2/getgid.2.html).\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.getgid.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Gets the group identity of the process. This is the numerical group id, not the group name. For more information, see [getgid(2)](http://kernel.org/doc/man-pages/online/pages/man2/getgid.2.html).\n","ellipsis_description":"Gets the group identity of the process. This is the numerical group id, not the group name. For more information, se...","line":107,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L107","name":"getgid","path":"process.getgid"},{"id":"process.getuid","type":"class method","signatures":[{"args":[],"returns":[{"type":"Number"}]}],"description":"Gets the user identity of the process. Note that this is the numerical userid, not the username. For more information, see [getuid(2)](http://kernel.org/doc/man-pages/online/pages/man2/getuid.2.html).\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.getuid.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Gets the user identity of the process. Note that this is the numerical userid, not the username. For more information, see [getuid(2)](http://kernel.org/doc/man-pages/online/pages/man2/getuid.2.html).\n","ellipsis_description":"Gets the user identity of the process. Note that this is the numerical userid, not the username. For more informatio...","line":120,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L120","name":"getuid","path":"process.getuid"},{"id":"process.installPrefix","type":"class property","signatures":[{"returns":[{"type":"String"}]}],"description":"A compiled-in property that exposes the `NODE_PREFIX`.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.installprefix.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>","short_description":"A compiled-in property that exposes the `NODE_PREFIX`.\n","ellipsis_description":"A compiled-in property that exposes the `NODE_PREFIX`.\n ...","line":353,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L353","name":"installPrefix","path":"process.installPrefix"},{"id":"process.kill","type":"class method","signatures":[{"args":[{"name":"pid"},{"name":"signal","default_value":"SIGTERM"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"pid","types":["Number"],"description":"The process id to kill"},{"name":"signal","types":["String"],"description":"A string describing the signal to send; the default is `SIGTERM`."}],"description":"Send a signal to a process. The `signal` names are strings like 'SIGINT' or 'SIGUSR1'. For more information, see [kill(2)](http://www.kernel.org/doc/man-pages/online/pages/man2/kill.2.html).\n\n<Note>Just because the name of this function is `process.kill`, it is really just a signal sender, like the `kill` system call.  The signal sent may do something other than kill the target process.</Note>\n\n#### Example: Sending a signal to yourself\n\n    process.on('SIGHUP', function () {\n      console.log('Got SIGHUP signal.');\n    });\n\n    setTimeout(function () {\n      console.log('Exiting.');\n      process.exit(0);\n    }, 100);\n\n    process.kill(process.pid, 'SIGHUP');","short_description":"Send a signal to a process. The `signal` names are strings like 'SIGINT' or 'SIGUSR1'. For more information, see [kill(2)](http://www.kernel.org/doc/man-pages/online/pages/man2/kill.2.html).\n","ellipsis_description":"Send a signal to a process. The `signal` names are strings like 'SIGINT' or 'SIGUSR1'. For more information, see [ki...","line":145,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L145","name":"kill","path":"process.kill"},{"id":"process.memoryUsage","type":"class method","signatures":[{"args":[],"returns":[{"type":"Object"}]}],"description":"Returns an object describing the memory usage of the Node.js process measured in bytes.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.memoryusage.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>\n\nThis generates:\n\n  { rss: 4935680,\n    heapTotal: 1826816,\n    heapUsed: 650472 }\n\nIn this object, `heapTotal` and `heapUsed` refer to V8's memory usage.","short_description":"Returns an object describing the memory usage of the Node.js process measured in bytes.\n","ellipsis_description":"Returns an object describing the memory usage of the Node.js process measured in bytes.\n ...","line":165,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L165","name":"memoryUsage","path":"process.memoryUsage"},{"id":"process.nextTick","type":"class method","signatures":[{"args":[{"name":"callback","args":[]}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"callback","types":["Function"],"description":"The callback function to execute on the next tick"}],"description":"On the next loop around the event loop call this callback. This is **not** a simple alias to `setTimeout(fn, 0)`; it's much more efficient.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.nexttick.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"On the next loop around the event loop call this callback. This is **not** a simple alias to `setTimeout(fn, 0)`; it's much more efficient.\n","ellipsis_description":"On the next loop around the event loop call this callback. This is **not** a simple alias to `setTimeout(fn, 0)`; it...","line":178,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L178","name":"nextTick","path":"process.nextTick"},{"id":"process.pid","type":"class property","signatures":[{"returns":[{"type":"Number"}]}],"description":"Returns the PID of the process.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.pid.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>","short_description":"Returns the PID of the process.\n","ellipsis_description":"Returns the PID of the process.\n ...","line":287,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L287","name":"pid","path":"process.pid"},{"id":"process.platform","type":"class property","signatures":[{"returns":[{"type":"String"}]}],"description":"Identifies the platform you're running on, like `'linux2'`, `'darwin'`, etc.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.platform.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>","short_description":"Identifies the platform you're running on, like `'linux2'`, `'darwin'`, etc.\n","ellipsis_description":"Identifies the platform you're running on, like `'linux2'`, `'darwin'`, etc.\n ...","line":299,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L299","name":"platform","path":"process.platform"},{"id":"process.setgid","type":"class method","signatures":[{"args":[{"name":"id"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"id","types":["Number"],"description":"The new identity for the group process"}],"description":"Sets the group identity of the process. This accepts either a numerical ID or a groupname string. If a groupname is specified, this method blocks while resolving it to a numerical ID. For more information, see [setgid(2)](http://kernel.org/doc/man-pages/online/pages/man2/setgid.2.html).\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.setgid.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Sets the group identity of the process. This accepts either a numerical ID or a groupname string. If a groupname is specified, this method blocks while resolving it to a numerical ID. For more information, see [setgid(2)](http://kernel.org/doc/man-pages/online/pages/man2/setgid.2.html).\n","ellipsis_description":"Sets the group identity of the process. This accepts either a numerical ID or a groupname string. If a groupname is ...","line":191,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L191","name":"setgid","path":"process.setgid"},{"id":"process.setuid","type":"class method","signatures":[{"args":[{"name":"id"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"id","types":["Number"],"description":"The new identity for the user process"}],"description":"Sets the user identity of the process. This accepts either a numerical ID or a username string.  If a username is specified, this method blocks while resolving it to a numerical ID. For more information, see [setuid(2)](http://kernel.org/doc/man-pages/online/pages/man2/setuid.2.html).\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.setuid.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Sets the user identity of the process. This accepts either a numerical ID or a username string.  If a username is specified, this method blocks while resolving it to a numerical ID. For more information, see [setuid(2)](http://kernel.org/doc/man-pages/online/pages/man2/setuid.2.html).\n","ellipsis_description":"Sets the user identity of the process. This accepts either a numerical ID or a username string.  If a username is sp...","line":204,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L204","name":"setuid","path":"process.setuid"},{"id":"process.stderr","type":"class property","signatures":[{"returns":[{"type":"fs.WriteStream"}]}],"description":"A writable stream to stderr.\n\n`process.stderr` and `process.stdout` are unlike other streams in Node.js in that writes to them are usually blocking.  They are blocking in the case that they refer to regular files or TTY file descriptors. In the case they refer to pipes, they are non-blocking like other streams.","short_description":"A writable stream to stderr.\n","ellipsis_description":"A writable stream to stderr.\n ...","line":363,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L363","name":"stderr","path":"process.stderr"},{"id":"process.stdin","type":"class property","signatures":[{"returns":[{"type":"fs.ReadableStream"}]}],"description":"A `Readable Stream` for stdin. The stdin stream is paused by default, so one must call `process.stdin.resume()` to read from it.\n\n#### Example\n\nHere's an example of opening standard input and listening for both events:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.stdin.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>","short_description":"A `Readable Stream` for stdin. The stdin stream is paused by default, so one must call `process.stdin.resume()` to read from it.\n","ellipsis_description":"A `Readable Stream` for stdin. The stdin stream is paused by default, so one must call `process.stdin.resume()` to r...","line":385,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L385","name":"stdin","path":"process.stdin"},{"id":"process.stdout","type":"class property","signatures":[{"returns":[{"type":"fs.WriteStream"}]}],"description":"A writable stream to `stdout`.\n\n`process.stderr` and `process.stdout` are unlike other streams in Node.js in that writes to them are usually blocking.  They are blocking in the case that they refer to regular files or TTY file descriptors. In the case they refer to pipes, they are non-blocking like other streams.\n\nAs an aside, here's what the innards of `console.log()` look like:\n\n    console.log (d) {\n      process.stdout.write(d + '\\n');\n    };","short_description":"A writable stream to `stdout`.\n","ellipsis_description":"A writable stream to `stdout`.\n ...","line":402,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L402","name":"stdout","path":"process.stdout"},{"id":"process.title","type":"class property","signatures":[{"returns":[{"type":"Void"},{"type":"String"}]}],"description":"A getter and setter to set what is displayed in `ps`.","short_description":"A getter and setter to set what is displayed in `ps`.","ellipsis_description":"A getter and setter to set what is displayed in `ps`. ...","line":307,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L307","name":"title","path":"process.title"},{"id":"process.umask","type":"class method","signatures":[{"args":[{"name":"mask","optional":true}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"mask","types":["Number"],"description":"The mode creation mask to get or set"}],"description":"Sets or reads the process's file mode creation mask. Child processes inherit the mask from the parent process. Returns the old mask if `mask` argument is given, otherwise returns the current mask.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.umask.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Sets or reads the process's file mode creation mask. Child processes inherit the mask from the parent process. Returns the old mask if `mask` argument is given, otherwise returns the current mask.\n","ellipsis_description":"Sets or reads the process's file mode creation mask. Child processes inherit the mask from the parent process. Retur...","line":217,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L217","name":"umask","path":"process.umask"},{"id":"process.uptime","type":"class method","signatures":[{"args":[],"returns":[{"type":"Number"}]}],"description":"Returns the number of seconds Node.js has been running.","short_description":"Returns the number of seconds Node.js has been running.","ellipsis_description":"Returns the number of seconds Node.js has been running. ...","line":225,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L225","name":"uptime","path":"process.uptime"},{"id":"process.version","type":"class property","signatures":[{"returns":[{"type":"String"}]}],"description":"A compiled-in property that exposes the `NODE_VERSION`.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.version.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>","short_description":"A compiled-in property that exposes the `NODE_VERSION`.\n","ellipsis_description":"A compiled-in property that exposes the `NODE_VERSION`.\n ...","line":320,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L320","name":"version","path":"process.version"},{"id":"process.versions","type":"class property","signatures":[{"returns":[{"type":"Object"}]}],"description":"A property exposing version strings of Node.js and its dependencies.\n\n#### Example\n\nThe following code:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.versions.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>\n\noutputs something similar to:\n\n   { node: '0.4.12',\n    v8: '3.1.8.26',\n    ares: '1.7.4',\n    ev: '4.4',\n    openssl: '1.0.0e-fips' }","short_description":"A property exposing version strings of Node.js and its dependencies.\n","ellipsis_description":"A property exposing version strings of Node.js and its dependencies.\n ...","line":341,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L341","name":"versions","path":"process.versions"},{"id":"process@exit","type":"event","signatures":[{"args":[]}],"description":"Emitted when the process is about to exit.  This is a good hook to perform constant time checks of the module's state (like for unit tests).  The main event loop will no longer be run after the `exit` callback finishes, so timers may not be scheduled.\n\n#### Example: Listening for an `'exit'` event:\n\n    process.on('exit', function () {\n        process.nextTick(function () {\n            console.log('This will not run');\n        });\n        console.log('About to exit.');\n    });","short_description":"Emitted when the process is about to exit.  This is a good hook to perform constant time checks of the module's state (like for unit tests).  The main event loop will no longer be run after the `exit` callback finishes, so timers may not be scheduled.\n","ellipsis_description":"Emitted when the process is about to exit.  This is a good hook to perform constant time checks of the module's stat...","line":32,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L32","name":"exit","path":"process.event.exit"},{"id":"process@uncaughtException","type":"event","signatures":[{"args":[{"name":"err"}]}],"arguments":[{"name":"err","types":["Error"],"description":"The standard Error Object"}],"description":"Emitted when an exception bubbles all the way back to the event loop. If a listener is added for this exception, the default action (which is to print a stack trace and exit) won't occur.\n\n#### Example: Listening for an `'uncaughtException'`:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.uncaughtException.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>\n\n<Note>An `uncaughtException` is a very crude mechanism for exception handling. Using `try / catch` in your program gives you more control over your program's flow.  Especially for server programs that are designed to stay running forever, `uncaughtException` can be a useful safety mechanism.</Note>","short_description":"Emitted when an exception bubbles all the way back to the event loop. If a listener is added for this exception, the default action (which is to print a stack trace and exit) won't occur.\n","ellipsis_description":"Emitted when an exception bubbles all the way back to the event loop. If a listener is added for this exception, the...","line":48,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L48","name":"uncaughtException","path":"process.event.uncaughtException"}],"parentDir":"nodejs_ref_guidev0.6.7","subclasses":[],"href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L16","name":"process","path":"process"},"process@exit":{"id":"process@exit","type":"event","signatures":[{"args":[]}],"description":"Emitted when the process is about to exit.  This is a good hook to perform constant time checks of the module's state (like for unit tests).  The main event loop will no longer be run after the `exit` callback finishes, so timers may not be scheduled.\n\n#### Example: Listening for an `'exit'` event:\n\n    process.on('exit', function () {\n        process.nextTick(function () {\n            console.log('This will not run');\n        });\n        console.log('About to exit.');\n    });","short_description":"Emitted when the process is about to exit.  This is a good hook to perform constant time checks of the module's state (like for unit tests).  The main event loop will no longer be run after the `exit` callback finishes, so timers may not be scheduled.\n","ellipsis_description":"Emitted when the process is about to exit.  This is a good hook to perform constant time checks of the module's stat...","line":32,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L32","name":"exit","path":"process.event.exit"},"process@uncaughtException":{"id":"process@uncaughtException","type":"event","signatures":[{"args":[{"name":"err"}]}],"arguments":[{"name":"err","types":["Error"],"description":"The standard Error Object"}],"description":"Emitted when an exception bubbles all the way back to the event loop. If a listener is added for this exception, the default action (which is to print a stack trace and exit) won't occur.\n\n#### Example: Listening for an `'uncaughtException'`:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.uncaughtException.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>\n\n<Note>An `uncaughtException` is a very crude mechanism for exception handling. Using `try / catch` in your program gives you more control over your program's flow.  Especially for server programs that are designed to stay running forever, `uncaughtException` can be a useful safety mechanism.</Note>","short_description":"Emitted when an exception bubbles all the way back to the event loop. If a listener is added for this exception, the default action (which is to print a stack trace and exit) won't occur.\n","ellipsis_description":"Emitted when an exception bubbles all the way back to the event loop. If a listener is added for this exception, the...","line":48,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L48","name":"uncaughtException","path":"process.event.uncaughtException"},"process.chdir":{"id":"process.chdir","type":"class method","signatures":[{"args":[{"name":"directory"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"directory","types":["String"],"description":"The directory name to change to"}],"description":"Changes the current working directory of the process or throws an exception if that fails.\n\n#### Example\n\n    console.log('Starting at directory: ' + process.cwd());\n    try {\n      process.chdir('/tmp');\n      console.log('New directory: ' + process.cwd());\n    }\n    catch (err) {\n      console.log('chdir failed: ' + err);\n    }","short_description":"Changes the current working directory of the process or throws an exception if that fails.\n","ellipsis_description":"Changes the current working directory of the process or throws an exception if that fails.\n ...","line":68,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L68","name":"chdir","path":"process.chdir"},"process.cwd":{"id":"process.cwd","type":"class method","signatures":[{"args":[],"returns":[{"type":"String"}]}],"description":"Returns the current working directory of the process. For example:\n\n  console.log('Current directory: ' + process.cwd());","short_description":"Returns the current working directory of the process. For example:\n","ellipsis_description":"Returns the current working directory of the process. For example:\n ...","line":78,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L78","name":"cwd","path":"process.cwd"},"process.exit":{"id":"process.exit","type":"class method","signatures":[{"args":[{"name":"code","default_value":0}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"code","types":["Number"],"description":"The code to end with"}],"description":"Ends the process with the specified `code`.\n\n#### Example: Exiting with a 'failure' code:\n\n    process.exit(1);\n\nThe shell that executed this should see the exit code as `1`.","short_description":"Ends the process with the specified `code`.\n","ellipsis_description":"Ends the process with the specified `code`.\n ...","line":94,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L94","name":"exit","path":"process.exit"},"process.getgid":{"id":"process.getgid","type":"class method","signatures":[{"args":[],"returns":[{"type":"Number"}]}],"description":"Gets the group identity of the process. This is the numerical group id, not the group name. For more information, see [getgid(2)](http://kernel.org/doc/man-pages/online/pages/man2/getgid.2.html).\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.getgid.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Gets the group identity of the process. This is the numerical group id, not the group name. For more information, see [getgid(2)](http://kernel.org/doc/man-pages/online/pages/man2/getgid.2.html).\n","ellipsis_description":"Gets the group identity of the process. This is the numerical group id, not the group name. For more information, se...","line":107,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L107","name":"getgid","path":"process.getgid"},"process.getuid":{"id":"process.getuid","type":"class method","signatures":[{"args":[],"returns":[{"type":"Number"}]}],"description":"Gets the user identity of the process. Note that this is the numerical userid, not the username. For more information, see [getuid(2)](http://kernel.org/doc/man-pages/online/pages/man2/getuid.2.html).\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.getuid.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Gets the user identity of the process. Note that this is the numerical userid, not the username. For more information, see [getuid(2)](http://kernel.org/doc/man-pages/online/pages/man2/getuid.2.html).\n","ellipsis_description":"Gets the user identity of the process. Note that this is the numerical userid, not the username. For more informatio...","line":120,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L120","name":"getuid","path":"process.getuid"},"process.kill":{"id":"process.kill","type":"class method","signatures":[{"args":[{"name":"pid"},{"name":"signal","default_value":"SIGTERM"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"pid","types":["Number"],"description":"The process id to kill"},{"name":"signal","types":["String"],"description":"A string describing the signal to send; the default is `SIGTERM`."}],"description":"Send a signal to a process. The `signal` names are strings like 'SIGINT' or 'SIGUSR1'. For more information, see [kill(2)](http://www.kernel.org/doc/man-pages/online/pages/man2/kill.2.html).\n\n<Note>Just because the name of this function is `process.kill`, it is really just a signal sender, like the `kill` system call.  The signal sent may do something other than kill the target process.</Note>\n\n#### Example: Sending a signal to yourself\n\n    process.on('SIGHUP', function () {\n      console.log('Got SIGHUP signal.');\n    });\n\n    setTimeout(function () {\n      console.log('Exiting.');\n      process.exit(0);\n    }, 100);\n\n    process.kill(process.pid, 'SIGHUP');","short_description":"Send a signal to a process. The `signal` names are strings like 'SIGINT' or 'SIGUSR1'. For more information, see [kill(2)](http://www.kernel.org/doc/man-pages/online/pages/man2/kill.2.html).\n","ellipsis_description":"Send a signal to a process. The `signal` names are strings like 'SIGINT' or 'SIGUSR1'. For more information, see [ki...","line":145,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L145","name":"kill","path":"process.kill"},"process.memoryUsage":{"id":"process.memoryUsage","type":"class method","signatures":[{"args":[],"returns":[{"type":"Object"}]}],"description":"Returns an object describing the memory usage of the Node.js process measured in bytes.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.memoryusage.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>\n\nThis generates:\n\n  { rss: 4935680,\n    heapTotal: 1826816,\n    heapUsed: 650472 }\n\nIn this object, `heapTotal` and `heapUsed` refer to V8's memory usage.","short_description":"Returns an object describing the memory usage of the Node.js process measured in bytes.\n","ellipsis_description":"Returns an object describing the memory usage of the Node.js process measured in bytes.\n ...","line":165,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L165","name":"memoryUsage","path":"process.memoryUsage"},"process.nextTick":{"id":"process.nextTick","type":"class method","signatures":[{"args":[{"name":"callback","args":[]}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"callback","types":["Function"],"description":"The callback function to execute on the next tick"}],"description":"On the next loop around the event loop call this callback. This is **not** a simple alias to `setTimeout(fn, 0)`; it's much more efficient.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.nexttick.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"On the next loop around the event loop call this callback. This is **not** a simple alias to `setTimeout(fn, 0)`; it's much more efficient.\n","ellipsis_description":"On the next loop around the event loop call this callback. This is **not** a simple alias to `setTimeout(fn, 0)`; it...","line":178,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L178","name":"nextTick","path":"process.nextTick"},"process.setgid":{"id":"process.setgid","type":"class method","signatures":[{"args":[{"name":"id"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"id","types":["Number"],"description":"The new identity for the group process"}],"description":"Sets the group identity of the process. This accepts either a numerical ID or a groupname string. If a groupname is specified, this method blocks while resolving it to a numerical ID. For more information, see [setgid(2)](http://kernel.org/doc/man-pages/online/pages/man2/setgid.2.html).\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.setgid.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Sets the group identity of the process. This accepts either a numerical ID or a groupname string. If a groupname is specified, this method blocks while resolving it to a numerical ID. For more information, see [setgid(2)](http://kernel.org/doc/man-pages/online/pages/man2/setgid.2.html).\n","ellipsis_description":"Sets the group identity of the process. This accepts either a numerical ID or a groupname string. If a groupname is ...","line":191,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L191","name":"setgid","path":"process.setgid"},"process.setuid":{"id":"process.setuid","type":"class method","signatures":[{"args":[{"name":"id"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"id","types":["Number"],"description":"The new identity for the user process"}],"description":"Sets the user identity of the process. This accepts either a numerical ID or a username string.  If a username is specified, this method blocks while resolving it to a numerical ID. For more information, see [setuid(2)](http://kernel.org/doc/man-pages/online/pages/man2/setuid.2.html).\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.setuid.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Sets the user identity of the process. This accepts either a numerical ID or a username string.  If a username is specified, this method blocks while resolving it to a numerical ID. For more information, see [setuid(2)](http://kernel.org/doc/man-pages/online/pages/man2/setuid.2.html).\n","ellipsis_description":"Sets the user identity of the process. This accepts either a numerical ID or a username string.  If a username is sp...","line":204,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L204","name":"setuid","path":"process.setuid"},"process.umask":{"id":"process.umask","type":"class method","signatures":[{"args":[{"name":"mask","optional":true}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"mask","types":["Number"],"description":"The mode creation mask to get or set"}],"description":"Sets or reads the process's file mode creation mask. Child processes inherit the mask from the parent process. Returns the old mask if `mask` argument is given, otherwise returns the current mask.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.umask.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Sets or reads the process's file mode creation mask. Child processes inherit the mask from the parent process. Returns the old mask if `mask` argument is given, otherwise returns the current mask.\n","ellipsis_description":"Sets or reads the process's file mode creation mask. Child processes inherit the mask from the parent process. Retur...","line":217,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L217","name":"umask","path":"process.umask"},"process.uptime":{"id":"process.uptime","type":"class method","signatures":[{"args":[],"returns":[{"type":"Number"}]}],"description":"Returns the number of seconds Node.js has been running.","short_description":"Returns the number of seconds Node.js has been running.","ellipsis_description":"Returns the number of seconds Node.js has been running. ...","line":225,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L225","name":"uptime","path":"process.uptime"},"process.arch":{"id":"process.arch","type":"class property","signatures":[{"returns":[{"type":"String"}]}],"description":"Identifies which processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.arch.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Identifies which processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.\n","ellipsis_description":"Identifies which processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.\n ...","line":237,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L237","name":"arch","path":"process.arch"},"process.argv":{"id":"process.argv","type":"class property","signatures":[{"returns":[{"type":"Array"}]}],"description":"An array containing the command line arguments.  The first element is 'node', and the second element is the name of the Javascript file.  The next elements will be any additional command line arguments.\n\n#### Example\n\nFirst, create a file called process.argv.js:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.argv.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>\n\nThen, using the Node.js REPL, type the following command:\n\n  $ node process-2.js one two=three four\n\nYou should see the following results:\n\n  0: node\n  1: <directoryPath>/process.js\n  2: one\n  3: two=three\n  4: four","short_description":"An array containing the command line arguments.  The first element is 'node', and the second element is the name of the Javascript file.  The next elements will be any additional command line arguments.\n","ellipsis_description":"An array containing the command line arguments.  The first element is 'node', and the second element is the name of ...","line":263,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L263","name":"argv","path":"process.argv"},"process.execPath":{"id":"process.execPath","type":"class property","signatures":[{"returns":[{"type":"String"}]}],"description":"This is the absolute pathname of the executable that started the process.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.execpath.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>","short_description":"This is the absolute pathname of the executable that started the process.\n","ellipsis_description":"This is the absolute pathname of the executable that started the process.\n ...","line":275,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L275","name":"execPath","path":"process.execPath"},"process.pid":{"id":"process.pid","type":"class property","signatures":[{"returns":[{"type":"Number"}]}],"description":"Returns the PID of the process.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.pid.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>","short_description":"Returns the PID of the process.\n","ellipsis_description":"Returns the PID of the process.\n ...","line":287,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L287","name":"pid","path":"process.pid"},"process.platform":{"id":"process.platform","type":"class property","signatures":[{"returns":[{"type":"String"}]}],"description":"Identifies the platform you're running on, like `'linux2'`, `'darwin'`, etc.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.platform.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>","short_description":"Identifies the platform you're running on, like `'linux2'`, `'darwin'`, etc.\n","ellipsis_description":"Identifies the platform you're running on, like `'linux2'`, `'darwin'`, etc.\n ...","line":299,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L299","name":"platform","path":"process.platform"},"process.title":{"id":"process.title","type":"class property","signatures":[{"returns":[{"type":"Void"},{"type":"String"}]}],"description":"A getter and setter to set what is displayed in `ps`.","short_description":"A getter and setter to set what is displayed in `ps`.","ellipsis_description":"A getter and setter to set what is displayed in `ps`. ...","line":307,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L307","name":"title","path":"process.title"},"process.version":{"id":"process.version","type":"class property","signatures":[{"returns":[{"type":"String"}]}],"description":"A compiled-in property that exposes the `NODE_VERSION`.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.version.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>","short_description":"A compiled-in property that exposes the `NODE_VERSION`.\n","ellipsis_description":"A compiled-in property that exposes the `NODE_VERSION`.\n ...","line":320,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L320","name":"version","path":"process.version"},"process.versions":{"id":"process.versions","type":"class property","signatures":[{"returns":[{"type":"Object"}]}],"description":"A property exposing version strings of Node.js and its dependencies.\n\n#### Example\n\nThe following code:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.versions.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>\n\noutputs something similar to:\n\n   { node: '0.4.12',\n    v8: '3.1.8.26',\n    ares: '1.7.4',\n    ev: '4.4',\n    openssl: '1.0.0e-fips' }","short_description":"A property exposing version strings of Node.js and its dependencies.\n","ellipsis_description":"A property exposing version strings of Node.js and its dependencies.\n ...","line":341,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L341","name":"versions","path":"process.versions"},"process.installPrefix":{"id":"process.installPrefix","type":"class property","signatures":[{"returns":[{"type":"String"}]}],"description":"A compiled-in property that exposes the `NODE_PREFIX`.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.installprefix.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>","short_description":"A compiled-in property that exposes the `NODE_PREFIX`.\n","ellipsis_description":"A compiled-in property that exposes the `NODE_PREFIX`.\n ...","line":353,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L353","name":"installPrefix","path":"process.installPrefix"},"process.stderr":{"id":"process.stderr","type":"class property","signatures":[{"returns":[{"type":"fs.WriteStream"}]}],"description":"A writable stream to stderr.\n\n`process.stderr` and `process.stdout` are unlike other streams in Node.js in that writes to them are usually blocking.  They are blocking in the case that they refer to regular files or TTY file descriptors. In the case they refer to pipes, they are non-blocking like other streams.","short_description":"A writable stream to stderr.\n","ellipsis_description":"A writable stream to stderr.\n ...","line":363,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L363","name":"stderr","path":"process.stderr"},"process.env":{"id":"process.env","type":"class property","signatures":[{"returns":[{"type":"Object"}]}],"description":"An object containing the user environment. For more information, see [environ(7)](http://kernel.org/doc/man-pages/online/pages/man7/environ.7.html).","short_description":"An object containing the user environment. For more information, see [environ(7)](http://kernel.org/doc/man-pages/online/pages/man7/environ.7.html).","ellipsis_description":"An object containing the user environment. For more information, see [environ(7)](http://kernel.org/doc/man-pages/on...","line":371,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L371","name":"env","path":"process.env"},"process.stdin":{"id":"process.stdin","type":"class property","signatures":[{"returns":[{"type":"fs.ReadableStream"}]}],"description":"A `Readable Stream` for stdin. The stdin stream is paused by default, so one must call `process.stdin.resume()` to read from it.\n\n#### Example\n\nHere's an example of opening standard input and listening for both events:\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=process.stdin.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=true' defer='defer'></script>","short_description":"A `Readable Stream` for stdin. The stdin stream is paused by default, so one must call `process.stdin.resume()` to read from it.\n","ellipsis_description":"A `Readable Stream` for stdin. The stdin stream is paused by default, so one must call `process.stdin.resume()` to r...","line":385,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L385","name":"stdin","path":"process.stdin"},"process.stdout":{"id":"process.stdout","type":"class property","signatures":[{"returns":[{"type":"fs.WriteStream"}]}],"description":"A writable stream to `stdout`.\n\n`process.stderr` and `process.stdout` are unlike other streams in Node.js in that writes to them are usually blocking.  They are blocking in the case that they refer to regular files or TTY file descriptors. In the case they refer to pipes, they are non-blocking like other streams.\n\nAs an aside, here's what the innards of `console.log()` look like:\n\n    console.log (d) {\n      process.stdout.write(d + '\\n');\n    };","short_description":"A writable stream to `stdout`.\n","ellipsis_description":"A writable stream to `stdout`.\n ...","line":402,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/process.js#L402","name":"stdout","path":"process.stdout"}}
{"console":{"id":"console","type":"class","description":"These methods are useful for printing to stdout and stderr. They are similar to the `console` object functions provided by most web browsers. The `console` object is global, so you don't need to `require` anything.\n\nIt's important to note that printing to stdout and stderr is synchronous, and therefore, blocking.","short_description":"These methods are useful for printing to stdout and stderr. They are similar to the `console` object functions provided by most web browsers. The `console` object is global, so you don't need to `require` anything.\n","ellipsis_description":"These methods are useful for printing to stdout and stderr. They are similar to the `console` object functions provi...","line":9,"aliases":[],"children":[{"id":"console.assert","type":"class method","signatures":[{"args":[],"returns":[{"type":"Void"}]}],"alias_of":"assert.ok","description":"An alias to `assert.ok()`.","short_description":"An alias to `assert.ok()`.","ellipsis_description":"An alias to `assert.ok()`. ...","line":16,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L16","name":"assert","path":"console.assert"},{"id":"console.dir","type":"class method","signatures":[{"args":[{"name":"obj"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"obj","types":["Object"],"description":"An object to inspect"}],"alias_of":"util.inspect","description":"Uses [[util.inspect `util.inspect()`]] on `obj` and prints the resulting string to stderr.","short_description":"Uses [[util.inspect `util.inspect()`]] on `obj` and prints the resulting string to stderr.","ellipsis_description":"Uses [[util.inspect `util.inspect()`]] on `obj` and prints the resulting string to stderr. ...","line":25,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L25","name":"dir","path":"console.dir"},{"id":"console.error","type":"class method","signatures":[{"args":[{"name":"arg","ellipsis":true,"optional":true}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"obj","types":["Object"],"description":"An object to inspect"}],"related_to":"console.log","description":"This performs the same role as `console.log()`, but prints to stderr instead.","short_description":"This performs the same role as `console.log()`, but prints to stderr instead.","ellipsis_description":"This performs the same role as `console.log()`, but prints to stderr instead. ...","line":42,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L42","name":"error","path":"console.error"},{"id":"console.info","type":"class method","signatures":[{"args":[],"returns":[{"type":"Void"}]}],"alias_of":"console.log","description":"This is just an alias to `console.log()`.","short_description":"This is just an alias to `console.log()`.","ellipsis_description":"This is just an alias to `console.log()`. ...","line":50,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L50","name":"info","path":"console.info"},{"id":"console.log","type":"class method","signatures":[{"args":[{"name":"arg","ellipsis":true,"optional":true}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"arg","types":["String"],"description":"The string to print, and any additional formatting arguments"}],"alias_of":"util.format","description":"Prints to stdout with a newline. This function can take multiple arguments in [a `printf()`-like](http://en.wikipedia.org/wiki/Printf_format_string#Format_placeholders) way.\n\nEach placeholder is replaced with the converted value from its corresponding argument. Supported placeholders are:\n\n* `%s` - String.\n* `%d` - Number (both integer and float).\n* `%j` - JSON.\n* `%%` - single percent sign (`'%'`). This does not consume an argument.\n\nIf formatting elements are not found in the first string then [[util.inspect `util.inspect()`]] is used on each argument.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=console.log.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Prints to stdout with a newline. This function can take multiple arguments in [a `printf()`-like](http://en.wikipedia.org/wiki/Printf_format_string#Format_placeholders) way.\n","ellipsis_description":"Prints to stdout with a newline. This function can take multiple arguments in [a `printf()`-like](http://en.wikipedi...","line":72,"aliases":["console.info"],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L72","name":"log","path":"console.log"},{"id":"console.time","type":"class method","signatures":[{"args":[{"name":"label"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"label","types":["String"],"description":"An identifying string"}],"related_to":"console.timeEnd","description":"Marks a time by printing it out to the console. This is used in conjunction with `console.timeEnd()`.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=console.time.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Marks a time by printing it out to the console. This is used in conjunction with `console.timeEnd()`.\n","ellipsis_description":"Marks a time by printing it out to the console. This is used in conjunction with `console.timeEnd()`.\n ...","line":85,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L85","name":"time","path":"console.time"},{"id":"console.timeEnd","type":"class method","signatures":[{"args":[{"name":"label"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"label","types":["String"],"description":"An identifying string"}],"related_to":"console.time","description":"Finish the previous timer and prints output.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=console.time.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Finish the previous timer and prints output.\n","ellipsis_description":"Finish the previous timer and prints output.\n ...","line":98,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L98","name":"timeEnd","path":"console.timeEnd"},{"id":"console.trace","type":"class method","signatures":[{"args":[],"returns":[{"type":"Void"}]}],"description":"Prints a stack trace to stderr of the current position.","short_description":"Prints a stack trace to stderr of the current position.","ellipsis_description":"Prints a stack trace to stderr of the current position. ...","line":106,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L106","name":"trace","path":"console.trace"},{"id":"console.warn","type":"class method","signatures":[{"args":[{"name":"arg","ellipsis":true,"optional":true}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"warn","types":["String"],"description":"A message to send"}],"related_to":"console.log","description":"This performs the same role as `console.log()`, but prints to stderr instead.","short_description":"This performs the same role as `console.log()`, but prints to stderr instead.","ellipsis_description":"This performs the same role as `console.log()`, but prints to stderr instead. ...","line":34,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L34","name":"warn","path":"console.warn"}],"parentDir":"nodejs_ref_guidev0.6.7","subclasses":[],"href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L9","name":"console","path":"console"},"console.assert":{"id":"console.assert","type":"class method","signatures":[{"args":[],"returns":[{"type":"Void"}]}],"alias_of":"assert.ok","description":"An alias to `assert.ok()`.","short_description":"An alias to `assert.ok()`.","ellipsis_description":"An alias to `assert.ok()`. ...","line":16,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L16","name":"assert","path":"console.assert"},"console.dir":{"id":"console.dir","type":"class method","signatures":[{"args":[{"name":"obj"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"obj","types":["Object"],"description":"An object to inspect"}],"alias_of":"util.inspect","description":"Uses [[util.inspect `util.inspect()`]] on `obj` and prints the resulting string to stderr.","short_description":"Uses [[util.inspect `util.inspect()`]] on `obj` and prints the resulting string to stderr.","ellipsis_description":"Uses [[util.inspect `util.inspect()`]] on `obj` and prints the resulting string to stderr. ...","line":25,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L25","name":"dir","path":"console.dir"},"console.warn":{"id":"console.warn","type":"class method","signatures":[{"args":[{"name":"arg","ellipsis":true,"optional":true}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"warn","types":["String"],"description":"A message to send"}],"related_to":"console.log","description":"This performs the same role as `console.log()`, but prints to stderr instead.","short_description":"This performs the same role as `console.log()`, but prints to stderr instead.","ellipsis_description":"This performs the same role as `console.log()`, but prints to stderr instead. ...","line":34,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L34","name":"warn","path":"console.warn"},"console.error":{"id":"console.error","type":"class method","signatures":[{"args":[{"name":"arg","ellipsis":true,"optional":true}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"obj","types":["Object"],"description":"An object to inspect"}],"related_to":"console.log","description":"This performs the same role as `console.log()`, but prints to stderr instead.","short_description":"This performs the same role as `console.log()`, but prints to stderr instead.","ellipsis_description":"This performs the same role as `console.log()`, but prints to stderr instead. ...","line":42,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L42","name":"error","path":"console.error"},"console.info":{"id":"console.info","type":"class method","signatures":[{"args":[],"returns":[{"type":"Void"}]}],"alias_of":"console.log","description":"This is just an alias to `console.log()`.","short_description":"This is just an alias to `console.log()`.","ellipsis_description":"This is just an alias to `console.log()`. ...","line":50,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L50","name":"info","path":"console.info"},"console.log":{"id":"console.log","type":"class method","signatures":[{"args":[{"name":"arg","ellipsis":true,"optional":true}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"arg","types":["String"],"description":"The string to print, and any additional formatting arguments"}],"alias_of":"util.format","description":"Prints to stdout with a newline. This function can take multiple arguments in [a `printf()`-like](http://en.wikipedia.org/wiki/Printf_format_string#Format_placeholders) way.\n\nEach placeholder is replaced with the converted value from its corresponding argument. Supported placeholders are:\n\n* `%s` - String.\n* `%d` - Number (both integer and float).\n* `%j` - JSON.\n* `%%` - single percent sign (`'%'`). This does not consume an argument.\n\nIf formatting elements are not found in the first string then [[util.inspect `util.inspect()`]] is used on each argument.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=console.log.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Prints to stdout with a newline. This function can take multiple arguments in [a `printf()`-like](http://en.wikipedia.org/wiki/Printf_format_string#Format_placeholders) way.\n","ellipsis_description":"Prints to stdout with a newline. This function can take multiple arguments in [a `printf()`-like](http://en.wikipedi...","line":72,"aliases":["console.info"],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L72","name":"log","path":"console.log"},"console.time":{"id":"console.time","type":"class method","signatures":[{"args":[{"name":"label"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"label","types":["String"],"description":"An identifying string"}],"related_to":"console.timeEnd","description":"Marks a time by printing it out to the console. This is used in conjunction with `console.timeEnd()`.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=console.time.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Marks a time by printing it out to the console. This is used in conjunction with `console.timeEnd()`.\n","ellipsis_description":"Marks a time by printing it out to the console. This is used in conjunction with `console.timeEnd()`.\n ...","line":85,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L85","name":"time","path":"console.time"},"console.timeEnd":{"id":"console.timeEnd","type":"class method","signatures":[{"args":[{"name":"label"}],"returns":[{"type":"Void"}]}],"arguments":[{"name":"label","types":["String"],"description":"An identifying string"}],"related_to":"console.time","description":"Finish the previous timer and prints output.\n\n#### Example\n\n<script src='http://64.30.143.68/serve?repo=git%3A%2F%2Fgithub.com%2Fc9%2Fnodedocs-examples.git&file=console.time.js&linestart=3&lineend=0&mode=javascript&theme=crimson_editor&showlines=false' defer='defer'></script>","short_description":"Finish the previous timer and prints output.\n","ellipsis_description":"Finish the previous timer and prints output.\n ...","line":98,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L98","name":"timeEnd","path":"console.timeEnd"},"console.trace":{"id":"console.trace","type":"class method","signatures":[{"args":[],"returns":[{"type":"Void"}]}],"description":"Prints a stack trace to stderr of the current position.","short_description":"Prints a stack trace to stderr of the current position.","ellipsis_description":"Prints a stack trace to stderr of the current position. ...","line":106,"aliases":[],"children":[],"parentDir":"nodejs_ref_guidev0.6.7","href":"https://github.com/c9/nodedocs/blob/master/src/nodejs_ref_guide/v0.6.7/Globals/stdio.js#L106","name":"trace","path":"console.trace"}}

[31mexec error: Error: maxBuffer exceeded.[39m
